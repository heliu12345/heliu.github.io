<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-26T06:57:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>whitedofu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java自带注解库</title>
    <link href="http://yoursite.com/2019/12/26/Java%E8%87%AA%E5%B8%A6%E6%B3%A8%E8%A7%A3%E5%BA%93/"/>
    <id>http://yoursite.com/2019/12/26/Java%E8%87%AA%E5%B8%A6%E6%B3%A8%E8%A7%A3%E5%BA%93/</id>
    <published>2019-12-26T06:45:21.000Z</published>
    <updated>2019-12-26T06:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java自带注解库"><a href="#Java自带注解库" class="headerlink" title="Java自带注解库"></a>Java自带注解库</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包"></a>引入jar包</h3><p>使用 Maven 导入jar包坐标：<code>javax.annotation-api</code></p><h3 id="某类的open与close"><a href="#某类的open与close" class="headerlink" title="某类的open与close"></a>某类的open与close</h3><p>@PostConstruct  //在构造以后执行<br>@PreDestroy  //在销毁之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeDemo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@PostConstruct</span>  <span class="comment">//在构造以后执行</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"open()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span>  <span class="comment">//在销毁之前</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"close()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java自带注解库&quot;&gt;&lt;a href=&quot;#Java自带注解库&quot; class=&quot;headerlink&quot; title=&quot;Java自带注解库&quot;&gt;&lt;/a&gt;Java自带注解库&lt;/h1&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring-MVC</title>
    <link href="http://yoursite.com/2019/12/26/Spring-MVC/"/>
    <id>http://yoursite.com/2019/12/26/Spring-MVC/</id>
    <published>2019-12-26T05:39:25.000Z</published>
    <updated>2019-12-26T06:56:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Web-MVC"><a href="#Spring-Web-MVC" class="headerlink" title="Spring Web MVC"></a>Spring Web MVC</h1><h2 id="Spring-Web-MVC简介"><a href="#Spring-Web-MVC简介" class="headerlink" title="Spring Web MVC简介"></a>Spring Web MVC简介</h2><h3 id="MVC模式简介"><a href="#MVC模式简介" class="headerlink" title="MVC模式简介"></a>MVC模式简介</h3><p>MVC是经典的GUI用户界面设计模式，几乎所有的GUI都采用了MVC模式。Web界面开发时也普遍采用了MVC模式</p><p><strong>M-Model 模型</strong><br>&emsp;<strong>模型(Model)</strong> 的职责是负责业务逻辑。包含两层：业务数据 和 业务处理逻辑。比如实体类、DAO、Service都属于模型层<br><strong>V-View 视图</strong><br>&emsp;<strong>视图(View)</strong> 的职责是负责显示界面 和 用户交互(手气用户信息)。属于视图的组件是不包含业务逻辑和控制逻辑的JSP<br><strong>C-Controller 控制器</strong><br>&emsp;<strong>控制器(Controller)</strong> 是模型层M 和 视图层V 之间的桥梁，用于控制流程。比如：在Servlet项目中的单一控制器 ActionServlet</p><h3 id="什么是Spring-Web-MVC"><a href="#什么是Spring-Web-MVC" class="headerlink" title="什么是Spring Web MVC"></a>什么是Spring Web MVC</h3><p>&emsp;<strong>Spring Web MVC</strong> 是Spring框架一个非常重要的功能模块。实现了MVC结构，便于简单、快速开发MVC结构的Web程序。Spring Web MVC 提供的API封装了Web开发中常用的功能，简化了Web过程</p><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><p>&emsp;<strong>Spring Web MVC的核心组件：</strong>Spring Web MVC提供了M、V和C相关的主要实现组件，具体如下：</p><ul><li>DispatcherServlet：控制器，请求入口</li><li>HandlerMapping：控制器，请求派发</li><li>Controller：控制器，请求处理流程</li><li>ModelAndView：模型，封装业务处理结果和视图</li><li>ViewReolver：视图，视图显示处理器</li></ul><h3 id="MVC处理流程"><a href="#MVC处理流程" class="headerlink" title="MVC处理流程"></a>MVC处理流程</h3><ol><li>浏览器向Spring发出请求，请求交给前端控制器 <code>DispatcherServlet</code> 处理(Web.xml配置指向)</li><li>控制器通过 <code>HandlerMapping</code> 找到相应的 <code>Controller</code> 组件处理请求</li><li>执行 <code>Controller</code> 组件约定方法处理请求，在约定方法调用模组组件完成业务处理。约定方法可以返回一个 <code>ModelAndView</code> 对象，封装了处理结果数据和视图名称信息</li><li>控制器接收 <code>ModelAndView</code> 之后，调用 <code>ViewResolver</code> 组件，定位 View(JSP) 并传递数据信息，生成响应界面结果</li></ol><h2 id="MVC配置及组件"><a href="#MVC配置及组件" class="headerlink" title="MVC配置及组件"></a>MVC配置及组件</h2><h3 id="搭建Spring-Web-MVC环境"><a href="#搭建Spring-Web-MVC环境" class="headerlink" title="搭建Spring Web MVC环境"></a>搭建Spring Web MVC环境</h3><ol><li>导入Jar包：Maven坐标 <code>spring-webmvc</code>；【IDEA】可以框架添加</li><li>在 <code>src</code> 下添加Spring的XML配置文件</li><li>在 <code>web.xml</code> 文件中添加配置，将对应请求转交给前端控制器<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将*.do的请求都转到MyName --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- MyName指向前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>MyName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置Spring规则启动参数：contextConfigLocation=classpath:XX.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:beans.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置当Web应用启动时，该Servlet同时启动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在指定的Spring的XML配置文件中指定bean（组件搜索 / bean标签配置），如使用注解映射增加标签<code>&lt;mvn:annotation-driven /&gt;</code> （详情看下文注解应用）</li></ol><blockquote><p>一定注意，IDEA的自动填充看清楚，其命名空间不同，默认为<code>xmlns:mvc=&quot;http://www.springframework.org/schema/cache&quot;</code>，但应选择 <code>xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</code> MVC结尾的这个命名空间</p></blockquote><h3 id="Controller组件"><a href="#Controller组件" class="headerlink" title="Controller组件"></a>Controller组件</h3><p>&emsp;<strong>Controller组件：</strong>负责执行具体的业务处理，可调用DAO等组件，编写时需要实现 <code>Controller</code> 接口及约定方法（handleRequest）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello servlet"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"你好"</span>);<span class="comment">//返回ModelAndView，下节说明</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ModelAndView组件"><a href="#ModelAndView组件" class="headerlink" title="ModelAndView组件"></a>ModelAndView组件</h3><p>&emsp;<strong>ModelAndView组件：</strong>Controller组件约定的 handleRequest 方法执行后返回一个 ModelAndView 对象，该对象可封装模型数据和视图名响应信息</p><p><strong>构造器：</strong></p><blockquote><p><code>ModelAndView(String viewName)</code><br><code>ModelAndView(String viewName, Map model)</code><br>viewName是JSP页面的名字；model的数据储存到request的attribute中</p></blockquote><h3 id="HandlerMapping组件"><a href="#HandlerMapping组件" class="headerlink" title="HandlerMapping组件"></a>HandlerMapping组件</h3><p>&emsp;<strong>HandlerMapping组件：</strong>通过HandlerMapping组件，DispatchServlet控制器可以将客户HTTP请求映射到 <code>Controller</code> 组件上，该顶级接口下的三种实现类：</p><p><strong><code>SimpleUrlHandlerMapping</code></strong>：维护一个 <code>HTTP请求</code> 和 <code>Controller</code> 映射关系列表(map)，根据列表对应关系调用 Controller ，<strong>其定义如下（SpringXML文件中）</strong></p><p><strong><code>RequestMappingHandlerMapping</code></strong></p><p><strong><code>RequestMappingHandlerAdapter</code></strong>：在 Controller 类和方法上使用 <code>@RequestMapping</code> 注解指定对应的客户HTTP请求（后续注解会详解）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- SimpleUrlHandlerMapping配置方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/login.do"</span>&gt;</span>loginController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"/reg.do"</span>&gt;</span>regController<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SimpleUrlHandlerMapping中的&lt;prop&gt;内容与以下BeanId匹配 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginController"</span> <span class="attr">class</span>=<span class="string">"org.example.web.LoginController"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"regController"</span> <span class="attr">class</span>=<span class="string">"org.example.web.RegController"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ViewResolver组件"><a href="#ViewResolver组件" class="headerlink" title="ViewResolver组件"></a>ViewResolver组件</h3><p>&emsp;<strong>ViewResolver组件：</strong> 所有 Controller 组件都返回一个 ModelAndView 实例，封装了视图名。Spring中的视图以名字为标识，视图解析器 <code>ViewResolver</code> 通过名字来解析视图，该顶级接口下的四种实现类：</p><p><strong><code>UrlBasedViewResolver</code></strong>：将视图名直接解析成对应的URL，不需要显示的映射定义。如果视图名与视图资源名字是一致的，就可使用该解析器，而无需进行映射</p><p><strong><code>InternalResourceViewResolver</code></strong>：UrlBasedViewResolver 的子类，它支持 InternalResourceViewResolver (对Servlet和JSP的包装) ，以及子类 JstlView 和 TilesView 响应类型，<strong>其定义如下（SpringXML文件中）</strong></p><p><strong><code>XmlViewResolver</code></strong>：支持用 xml 文件定义具体的响应视图文件</p><p><strong><code>VelocityViewResolver</code> / <code>FreeMarkerViewResolver</code></strong>：UrlBasedViewResolver 的子类，它能支持 VelocityView 和 FreeMarkerView （VelocityViewResolver 及其 VelocityView 已经淘汰）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- InternalResourceViewResolver配置方式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 定义好后，如视图名为 hello 通过该配置后映射到路径为：/WEB-INF/jsp/hello.jsp --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基于注解配置的MVC应用"><a href="#基于注解配置的MVC应用" class="headerlink" title="基于注解配置的MVC应用"></a>基于注解配置的MVC应用</h2><h3 id="Controller注解"><a href="#Controller注解" class="headerlink" title="Controller注解"></a>Controller注解</h3><p><strong>推荐使用</strong> <code>@Controller</code> 注解声明 Controller 组件，这样可以使得 Controller 定义更加灵活，可以不用实现 Controller 接口，请求处理的方法也可以灵活定义</p><p>为了使 <code>@Controller</code> 注解生效，需要在 Spring 的 XML 配置文件中开启组件扫描定义，并指定 Controller 组件所在包，代码如： <code>&lt;context:component-scan base-package=&quot;cn.tedu.web&quot; /&gt;</code></p><h3 id="RequestMapping注解"><a href="#RequestMapping注解" class="headerlink" title="RequestMapping注解"></a>RequestMapping注解</h3><p>&emsp;<strong><code>@RequestMapping</code></strong> 可以用在 类定义 和 方法定义 上，该标注表明这个类或方法与哪一个客户请求对应</p><p><strong>开启@RequestMapping注解</strong>，需要在 Spring 的 XML 配置文件中定义 <code>RequestMappingHandlerMapping</code>（类前注解需要） 和 <code>RequestMappingHandlerAdapter</code>（方法前注解需要）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring 3.1版本之前需要定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring 3.2版本开始可以使用下面这句语简化配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvn:annotation-driven</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">一定注意，IDEA的自动填充看清楚，其命名空间不同，</span></span><br><span class="line"><span class="comment">默认为`xmlns:mvc="http://www.springframework.org/schema/cache"`，</span></span><br><span class="line"><span class="comment">但应选择 `xmlns:mvc="http://www.springframework.org/schema/mvc"` </span></span><br><span class="line"><span class="comment">MVC结尾的这个命名空间</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MVC请求应用"><a href="#MVC请求应用" class="headerlink" title="MVC请求应用"></a>MVC请求应用</h2><h3 id="接收请求参数"><a href="#接收请求参数" class="headerlink" title="接收请求参数"></a>接收请求参数</h3><p><strong>Spring MVC Web</strong>请求提交数据 到 控制器 有下面几种方法：<br>》》使用 <code>HttpServletRequest</code> 获取<br>》》使用 <code>@RequestParam</code> 注解<br>》》使用自动机制封装成 <code>Bean</code> 对象  </p><p>一、使用 <code>HttpServletRequest</code> 获取：优点直接，缺点需要自己处理数据类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Web-MVC&quot;&gt;&lt;a href=&quot;#Spring-Web-MVC&quot; class=&quot;headerlink&quot; title=&quot;Spring Web MVC&quot;&gt;&lt;/a&gt;Spring Web MVC&lt;/h1&gt;&lt;h2 id=&quot;Spring-Web-MVC简介&quot;
      
    
    </summary>
    
    
      <category term="技术环境" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="SpringMVC" scheme="http://yoursite.com/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架</title>
    <link href="http://yoursite.com/2019/12/26/Spring%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2019/12/26/Spring%E6%A1%86%E6%9E%B6/</id>
    <published>2019-12-26T04:29:32.000Z</published>
    <updated>2019-12-26T06:56:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="Spring简介"><a href="#Spring简介" class="headerlink" title="Spring简介"></a>Spring简介</h2><h3 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h3><ul><li>Spring 是一个开源的轻量级的应用开发框架，其目的是用于简化企业级应用程序开发，降低侵入性</li><li>Spring其核心功能：IOC(控制反向)、AOP(面向切面编程)</li><li>其提供的功能可以将组件的耦合度降至最低，即解耦，便于系统日后的维护和升级</li><li>Spring为系统提供了一个整体的解决方案，开发者可以利用它本身提供的功能外，也可以与第三方框架和技术整合应用，可以自由选择选用哪种技术进行开发</li><li>Spring本质是管理软件中的对象，即<strong>创建对象</strong>和维护<strong>对象之间的关系</strong></li></ul><h3 id="什么时候使用Spring"><a href="#什么时候使用Spring" class="headerlink" title="什么时候使用Spring"></a>什么时候使用Spring</h3><p>&emsp;当需要<strong>管理</strong>JavaBean对象的时候就可以使用，Spring最简洁的对象管理方案之一 </p><p><strong>JavaBean：</strong>一种简单规范的Java对象，详情参考《Java对象规范》</p><h3 id="使用Spring"><a href="#使用Spring" class="headerlink" title="使用Spring"></a>使用Spring</h3><ol><li>Maven Jar坐标：** <code>spring-context</code>**</li><li>【IDEA】：可以通过项目右键，添加框架支持，勾选Spring</li><li>然后添加xml配置文件到根目录下，进行mapping映射</li></ol><h2 id="Spring容器"><a href="#Spring容器" class="headerlink" title="Spring容器"></a>Spring容器</h2><h3 id="容器简介"><a href="#容器简介" class="headerlink" title="容器简介"></a>容器简介</h3><ul><li>Spring容器，有各种称呼：Java Bean 容器、Bean 容器、IOC 容器</li><li>在Spring中，任何的Java类和JavaBean都被当成Bean处理，这些Bean通过容器管理和使用</li><li>Spring容器实现了IOC和AOP机制，这些机制可以简化<strong>Bean对象创建</strong>和<strong>Bean对象之间的解耦</strong></li><li>Spring容器有 <code>BeanFactory</code> 和 <code>ApplicationContext</code> 两种类型</li></ul><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><p>&emsp;<code>ApplicationContext</code> 继承自 <code>BeanFactory</code> 接口，拥有更多企业级方法，推荐使用该类型，实例化放下如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加载工程classpath下的配置文件实例化</span></span><br><span class="line">String conf = <span class="string">"applicationContext.xml"</span>;</span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(conf);</span><br></pre></td></tr></table></figure><h3 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h3><p>&emsp;从本质上讲 <code>BeanFactory</code> 和 <code>ApplicationContext</code> 仅仅是一个维护Bean定义以及相互依赖关系的高级工厂接口，通过这两个类我们可以访问 bean  </p><ol><li>在容器配置文件中添加bean定义</li><li>在创建容器对象后，获取对象</li></ol><h3 id="Bean实例化"><a href="#Bean实例化" class="headerlink" title="Bean实例化"></a>Bean实例化</h3><p>&emsp;<strong>使用构造器实例化：</strong>调用getBean()方法获取Bean实例，方法：<code>getBean(String id/name,Class type)</code>，会调用无参构造器实例化对象<br>&emsp;<strong>使用静态工厂方法实例化：</strong>调用getBean()方法获取Bean实例，方法：<code>getBean(String id/name,Class type)</code>，在bean标签中，添加<code>factory-method</code>并指向自身的<strong>静态</strong>方法<br>&emsp;<strong>使用实例工厂方法实例化：</strong>调用getBean()方法获取Bean实例，方法：<code>getBean(String id/name,Class type)</code>，在bean标签中，添加 <code>factory-method</code> 和 <code>factory-bean</code></p><h3 id="Bean的加载与销毁函数"><a href="#Bean的加载与销毁函数" class="headerlink" title="Bean的加载与销毁函数"></a>Bean的加载与销毁函数</h3><p>&emsp;可以指定bean本身的加载销毁函数，在bean标签内添加 <code>init-method</code> 和 <code>destory-method</code> 属性指定方法</p><h3 id="Bean初始化"><a href="#Bean初始化" class="headerlink" title="Bean初始化"></a>Bean初始化</h3><ul><li>在ApplicationContext实现的默认行为就是在启动时将所有singleton bean提前进行实例化</li><li>如果不想让一个singleton bean在Application初始化时被提前实例化，可以在bean标签中添加属性<code>lazy-init=&quot;true&quot;</code></li><li>更改后则延迟初始化，在第一次被用到时实例化，这也可以用到beans标签中，为所有bean指定延迟</li></ul><h3 id="bean标签"><a href="#bean标签" class="headerlink" title="bean标签"></a>bean标签</h3><table><thead><tr><th>bean标签属性</th><th>说明</th></tr></thead><tbody><tr><td>id</td><td>id标签是bean的唯一标识，IoC容器中bean的id标签不能重复</td></tr><tr><td>name</td><td>name是bean的名称标识，不可重复，不可与ID重复</td></tr><tr><td>class</td><td>为bean的全限定类名，该bean类classpath下的位置(包名+类名)</td></tr><tr><td>factory-method</td><td>值为方法名，工厂方法属性，通过该属性，我们可以调用一个指定的静态工厂方法</td></tr><tr><td>factory-bean</td><td>值为类名，如为实例工厂方法则指定上述方法所在类</td></tr><tr><td>init-method</td><td>bean的初始方法，在创建好bean后调用该方法</td></tr><tr><td>destory-method</td><td>bean的销毁方法，在销毁bean之前调用该方法，一般在该方法中释放资源</td></tr><tr><td>lazy-init</td><td>默认false，表示是否延迟初始化bean，如为true则在第一次调用时创建，否则创建容器时初始化</td></tr><tr><td>scope</td><td>scope属性表示bean的作用范围，scope有4个值：<br>&emsp;<strong>singleton：</strong>表示整个IOC容器共享一个Bean，也就是说每次说每次通过getBean获取的bean都是同一个<br>&emsp;<strong>prototype：</strong>每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例<br>&emsp;<strong>request：</strong>每次HTTP请求将会生成各自的bean实例<br>&emsp;<strong>session：</strong>每次会话请求对应一个bean实例<br><strong>global Session：</strong>在一个全局的Http Session中，容器会返回该Bean的同一个实例，仅在使用portlet context时有效<br><strong>singleton(默认)和prototype经常使用，request和session基本不使用</strong></td></tr><tr><td>autowire</td><td>表示bean的自动装配，autowire的值有：<br>&emsp;<strong>no：</strong>默认值，不进行自动装配<br>&emsp;<strong>byName：</strong>根据属性名自动装配。此选项将检查容器并根据名字查找与属性完全一致的bean，并将其与属性自动装配;<br>&emsp;<strong>byType：</strong>如果容器中存在一个与指定属性类型相同的bean，那么将与该属性自动装配；如果存在多个该类型bean，那么抛出异常，并指出不能使用byType方式进行自动装配；如果没有找到相匹配的bean，则什么事都不发生，也可以通过设置dependency-check=”objects” 让Spring抛出异常<br>&emsp;<strong>constructor：</strong>与byType方式类似，不同之处在于它应用于构造器参数。如果容器中没有找到与构造器参数类型一致的bean， 那么抛出异常<br>&emsp;<strong>autodetect：</strong>通过bean类的内省机制（introspection）来决定是使用constructor还是byType方式进行自动装配。如果发现默认的构造器，那么将使用byType方式，否则采用 constructor<br>&emsp;<strong>default：</strong>由上级标签的default-autowire属性确定</td></tr><tr><td>##</td><td></td></tr></tbody></table><h2 id="Spring-IOC"><a href="#Spring-IOC" class="headerlink" title="Spring IOC"></a>Spring IOC</h2><h3 id="IOC简介"><a href="#IOC简介" class="headerlink" title="IOC简介"></a>IOC简介</h3><ul><li><p><strong>IoC(Inversion of Control)</strong>，翻译为控制翻转</p></li><li><p>IoC是指程序中对象的获取方式发生反转，由最初的new方式创建，转变为由第三方框架创建、注入(DI)，它降低了对象之间的耦合度</p></li><li><p>Spring容器是采用DI方式实现了IOC控制，IOC是Spring框架的基础和核心</p></li><li><p><strong>DI(Dependency Injection)</strong>，翻译为依赖注入</p></li><li><p>DI的基本原理就是将一起工作具有关系的对象，通过构造方法参数或方法参数传入建立关联，因此容器的工作就是创建bean时注入那些依赖关系</p></li><li><p>IOC是一种思想，而DI是实现IOC的主要技术途径</p></li><li><p>DI主要有两种注入方式，即<strong>Setter注入</strong>和<strong>构造器注入</strong></p></li></ul><h3 id="bean注入值"><a href="#bean注入值" class="headerlink" title="bean注入值"></a>bean注入值</h3><p><strong>Setter注入：</strong>就是创建bean时，调用某属性的 set 方法为该属性赋值：<code>&lt;property name=&quot;成员变量&quot; value=&quot;赋的值&quot; /&gt;</code></p><p><strong>构造器注入：</strong>就是创建bean时，调用该bean的构造方法创建对象：<code>&lt;constructor-arg index=&quot;第几个参数0开始&quot; value=&quot;赋的值&quot; /&gt;</code></p><p><strong>自动装配：</strong>Spring IoC容器可以自动装配( autowire )相互协作bean之间的关联关系，其需要在 bean 标签中添加属性 autowire </p><blockquote><p>注入原理：name属性对应的值，其实是匹配类对象的 <code>set[Name]()</code> 方法来设置</p></blockquote><h3 id="注入对象"><a href="#注入对象" class="headerlink" title="注入对象"></a>注入对象</h3><p><strong>注入bean对象：</strong>某bean中的属性中包含其他bean，则需要注入bean对象，其操作方式为在该bean标签内添加子标签 <code>&lt;property name=&quot;成员变量&quot; ref=&quot;其他bean标签的id&quot; /&gt;</code></p><p><strong>注入集合：</strong>某bean的属性中包含集合对象，依然通过 <code>property</code> 子标签实现，<code>property</code>再定义子标签 <code>&lt;list/&gt; &lt;set/&gt; &lt;map/&gt; &lt;props/&gt;</code> 设置对应的 List Set Map Properties 的属性值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- list注入方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"成员变量"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>list.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>list.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>list.2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- map注入方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"成员变量"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key.0"</span> <span class="attr">value</span>=<span class="string">"value.0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"key.1"</span> <span class="attr">value</span>=<span class="string">"value.1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- properties注入方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"成员变量"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"user"</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"password"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>引用方式注入集合：</strong>利用 <code>util</code> 标签标明表示 list 、 set 、 properties ，如：<code>&lt;util:list /&gt;</code>、<code>&lt;util:set /&gt;</code>、<code>&lt;util:properties /&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span> = <span class="string">"langList"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>c++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>python<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引用方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"成员变量"</span> <span class="attr">ref</span>=<span class="string">"langList"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- properties定义方式参考下节表达式注入 --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Spring表达式注入"><a href="#Spring表达式注入" class="headerlink" title="Spring表达式注入"></a>Spring表达式注入</h3><p>&emsp;<strong>Spring引入了一种表达式语言</strong>，这和统一的EL在语法上很相似，这种表达是可以读取一个bean对象/集合中的数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 关于properties定义方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"jdbc"</span> <span class="attr">location</span>=<span class="string">"classpath:jdbc.properties"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以映射为properties对象 java：Properties jdbc = ctx.getBean("jdbc",Properties.class); --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用bean/集合的数据，根据其id --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"#&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"list0"</span> <span class="attr">value</span>=<span class="string">"#&#123;list.d0&#125;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注入null或空字符串"><a href="#注入null或空字符串" class="headerlink" title="注入null或空字符串"></a>注入null或空字符串</h3><p>&emsp;<strong>注入空字符串</strong>就是使用普通的<code>&quot;&quot;</code>就可以，<strong>注入null</strong>则需要 <code>&lt;null/&gt;</code> 标签</p><h3 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h3><p>&emsp;<strong>自动注入(自动装配)：</strong>有几种自动注入方式，byName、byType、constructor、autodetect、default</p><p><strong>byName：</strong>要将bean01注入到我们需要的Bean对象中，其中Bean对象中需要注入的属性为prop，则应该操作为：Bean对象设置属性 <code>autowire=&quot;byName&quot;</code>；bean01对象设置属性 <code>id=&quot;prop&quot;</code><br>Sping启动时会自动根据Bean属性名prop去匹配Sping中的BeanID，如果找到id为prop的对象，就进行注入</p><p><strong>byType：</strong>要将bean01注入到我们需要的Bean对象中，其中Bean对象中需要注入的类为Student，则应该操作为：Bean对象设置属性 <code>autowire=&quot;byType&quot;</code>；bean01对象设置属性 <code>class=&quot;XXX.Student&quot;</code><br>Sping启动时会自动根据Bean属性名prop去匹配Sping中的BeanID，如果找到id为prop的对象，就进行注入<br>Sping启动时会自动根据Bean属性类去匹配Sping中的BeanClass，如果匹配到并兼容，则进行注入(实现类、子类可以注入)</p><p><strong>constructor：</strong>与byType的方式类似，不同之处在于它应用于构造器参数。如果在容器中没有找到与构造器参数类型一致的bean，那么将会抛出异常</p><p><strong>autodetect：</strong>通过bean类的自省机制（introspection）来决定是使用constructor还是byType方式进行自动装配。如果发现默认的构造器，那么将使用byType方式</p><p><strong>default：</strong>由上级标签的default-autowire属性确定</p><h2 id="基于注解的组件扫描"><a href="#基于注解的组件扫描" class="headerlink" title="基于注解的组件扫描"></a>基于注解的组件扫描</h2><h3 id="什么是组件扫描"><a href="#什么是组件扫描" class="headerlink" title="什么是组件扫描"></a>什么是组件扫描</h3><ul><li>指一个包路径，Spring会自动扫描该包及其子包所有组件类，当发现组件类定义前有特定的注解标记时，就将该组件纳入到Spring容器。等价于原有XML配置中的 <code>&lt;bean&gt;</code> 定义功能</li><li>组件扫描可以代替大量XML配置的 <code>&lt;bean&gt;</code> 定义</li></ul><h3 id="指定扫描路径"><a href="#指定扫描路径" class="headerlink" title="指定扫描路径"></a>指定扫描路径</h3><p><strong>使用组件扫描：</strong>首先需要在XML配置中指定扫描父级 package 路径，<code>&lt;context:component-scan base-package=&quot;org.example&quot; /&gt;</code>，通过上面的配置，容器会自动扫描 org.example 包及其包下所有组件，检查具有标记的类，并实例化为bean</p><h3 id="自动扫描的注解标记"><a href="#自动扫描的注解标记" class="headerlink" title="自动扫描的注解标记"></a>自动扫描的注解标记</h3><p><strong>注解标记：</strong>指定扫描类路径后，只有具有以下注解标记的类才会扫描到Spring容器中(以下标记功能相同，语义不同，为了方便阅读)：</p><ol><li><code>@Component</code>     通用注解，通用组件</li><li><code>@Name</code>  通用注解（不经常使用）</li><li><code>@Repository</code>   持久化层组件注解，储存组件</li><li><code>@Service</code>  业务层组件注解，业务功能组件</li><li><code>@Controller</code>   控制层组件注解，控制器组件</li></ol><h3 id="自动扫描组件的命名"><a href="#自动扫描组件的命名" class="headerlink" title="自动扫描组件的命名"></a>自动扫描组件的命名</h3><p>&emsp;当一个组件在扫描过程中被检测到时，会生成一个默认id值，该值为小驼峰命名的类名。</p><p>&emsp;也可以通过注解自动id，以下为两个实例，id分别为：exampleBean 和 example</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  <span class="comment">//默认ID为：exampleBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"example"</span>)  <span class="comment">//指定ID为：example</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><h3 id="其他常用注解"><a href="#其他常用注解" class="headerlink" title="其他常用注解"></a>其他常用注解</h3><p><strong>组件的作用域</strong>通常受Spring管理的组件，默认作用域是 <code>singleton</code>，如需其他的作用域，可以使用 <code>@Scope</code> 注解，只要在注解中提供作用域名称即可</p><blockquote><p>Spring作用域：singleton、prototype、request、session、global Session</p></blockquote><p><strong>初始化和销毁回调：</strong>可以通过在方法名上添加注解：<code>@PostConstruct</code>设置初始化；<code>@PreDestroy</code>设置销毁</p><p><strong>懒惰初始化(非立即创建)：</strong>可以通过在类上添加注解：<code>@Lazy</code></p><h3 id="指定依赖注入关系"><a href="#指定依赖注入关系" class="headerlink" title="指定依赖注入关系"></a>指定依赖注入关系</h3><p>&emsp;<strong>@Autowired/@Qualifier：</strong>可以处理构造器注入和Setter注入，推荐@Autowired构造器注入</p><p>&emsp;<strong>@Inject/@Named：</strong>和@Autowired用法一致，需要额外导包</p><p>&emsp;<strong>@Resource：</strong>只能处理Setter注入，但大部分情况都是Setter注入，所以推荐且为重点</p><p>注解标记详解：</p><blockquote><p>@Autowired 写在构造器前面，声明需要为其注入的bean<br>@Qualifier 写在参数前面，声明需要注入的bean的ID值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExampleBean</span><span class="params">(@Qualifier(<span class="string">"teacher"</span>)</span>Teacher teacher)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//注入的对象单例时，@Qualifier 可省略。此时Spring按照类型匹配参数</span></span><br></pre></td></tr></table></figure><blockquote><p>@Autowired 写在set方法前面，声明需要为其注入的bean<br>@Qualifier 写在参数前面，声明需要注入的bean的ID值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(@Qualifier(<span class="string">"teacher"</span>)</span>Teacher teacher)</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">        System.out.println(<span class="string">"Teacher"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//注入的对象单例时，@Qualifier 可省略。此时Spring按照类型匹配参数</span></span><br><span class="line"><span class="comment">//@Autowired 也可以写在属性上，作用和写在set方法上类似，但只会执行一行代码：this.teacher = teacher;</span></span><br></pre></td></tr></table></figure><blockquote><p>@Inject 注解标记是Spring3.0开始增添的对JSR-330标准的支持，使用前需要添加JSR-330的jar包 <code>javax.inject-1.jar</code><br>@Inject 注解用法和 @Autowire 一致，其中：</p><blockquote><p>@Inject 等价于 @Autowire<br>@Named 等价于 @Qualifier<br>@Inject 和 @Autowire 功能一直，但使用时需要额外导包</p></blockquote></blockquote><blockquote><p>@Resource 注解能用于 setter 注入，但更简单</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">    <span class="meta">@Resource</span>(name=<span class="string">"teacher"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">        System.out.println(<span class="string">"Teacher"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//注入的对象单例时，(name="teacher")可省略。此时Spring按照类型匹配参数</span></span><br><span class="line"><span class="comment">//@Resource 也可以写在属性上，作用和写在set方法上类似，但只会执行一行代码：this.teacher = teacher;</span></span><br></pre></td></tr></table></figure><h3 id="注入Spring表达式值"><a href="#注入Spring表达式值" class="headerlink" title="注入Spring表达式值"></a>注入Spring表达式值</h3><p>一、 首先在xml配置中指定要注入的 properties 文件，代码：<code>&lt;util:properties id=&quot;const&quot; location=&quot;classpath:const.properties&quot; /&gt;</code><br>二、在java文件中，属性或setter方法前使用 @Value 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleBean</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"#&#123;const.PAGE_SIZE&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring框架&quot;&gt;&lt;a href=&quot;#Spring框架&quot; class=&quot;headerlink&quot; title=&quot;Spring框架&quot;&gt;&lt;/a&gt;Spring框架&lt;/h1&gt;&lt;h2 id=&quot;Spring简介&quot;&gt;&lt;a href=&quot;#Spring简介&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="技术环境" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf模板引擎</title>
    <link href="http://yoursite.com/2019/12/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    <id>http://yoursite.com/2019/12/26/Thymeleaf%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</id>
    <published>2019-12-26T03:06:51.000Z</published>
    <updated>2019-12-26T06:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h1><h2 id="什么是Thymeleaf"><a href="#什么是Thymeleaf" class="headerlink" title="什么是Thymeleaf"></a>什么是Thymeleaf</h2><p>&emsp;<strong>Thymeleaf</strong> 是一个HTML模板引擎</p><p>&emsp;<strong>功能：</strong>是将一个HTML文件作为一个模板，并根据模板中的特定标记，对模板中的内容进行修改或替换，形成一个新的HTML</p><h3 id="为什么使用Thymeleaf"><a href="#为什么使用Thymeleaf" class="headerlink" title="为什么使用Thymeleaf"></a>为什么使用Thymeleaf</h3><p>&emsp;因为 Thymeleaf 可以很好的分离前端与后端，减轻前端工程师压力，并且模板文件可以直接使用浏览器打开，嵌入 Thymeleaf 属性并不影响原 HTML 文件的结构</p><h2 id="使用Thymeleaf"><a href="#使用Thymeleaf" class="headerlink" title="使用Thymeleaf"></a>使用Thymeleaf</h2><h3 id="引入Thymeleaf包"><a href="#引入Thymeleaf包" class="headerlink" title="引入Thymeleaf包"></a>引入Thymeleaf包</h3><p>&emsp;<strong>Maven Jar坐标：</strong> <code>thymeleaf</code><br>&emsp;【IDEA】：可以通过项目右键，添加框架支持，勾选Thymeleaf</p><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建 Thymeleaf 模板引擎</span></span><br><span class="line">TemplateEngine te = <span class="keyword">new</span> TemplateEngine();</span><br><span class="line"><span class="comment">//2.创建 和 配置 解析器对象</span></span><br><span class="line">ClassLoaderTemplateResolver r = <span class="keyword">new</span> ClassLoaderTemplateResolver();</span><br><span class="line">r.setCharacterEncoding(<span class="string">"utf-8"</span>);  <span class="comment">//设置字符集</span></span><br><span class="line">r.setSuffix(<span class="string">".html"</span>);  <span class="comment">//设置后缀，方便以后写文件名不写后缀，直接写名</span></span><br><span class="line"><span class="comment">//3.引擎和解析器关联</span></span><br><span class="line">te.setTemplateResolver(r);</span><br><span class="line"><span class="comment">//4.创建 和 使用 上下文对象</span></span><br><span class="line">Context context = <span class="keyword">new</span> Context();</span><br><span class="line">context.setVariable(<span class="string">"name"</span>, name);</span><br><span class="line"><span class="comment">//5.渲染页面：把页面的html和容器里面的数据合并到一起，得到一个新的html页面</span></span><br><span class="line">String html = te.process(<span class="string">"index"</span>, context);</span><br></pre></td></tr></table></figure><h3 id="HTML模板"><a href="#HTML模板" class="headerlink" title="HTML模板"></a>HTML模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--解决idea thymeleaf 表达式模板报红波浪线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p><strong>说明：</strong>模板语法是写在标签内，作为属性来表现的</p><p>th:text=”‘text’+${var}”<br>th:utext=${var}<br>th:href=”@{‘text’+${var}}”<br>th:src=”@{${var}}”<br>th:remove=”all”</p><p>${Obj.key}  会自动调用Obj的getKey的方法获取到value</p><h3 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h3><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><h2 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h2><h3 id="博客项目"><a href="#博客项目" class="headerlink" title="博客项目"></a>博客项目</h3><p>主页内容的实现：<br>table –&gt; Entity<br>table.rows –&gt; entitys<br>xx – DAO – xx</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Thymeleaf模板引擎&quot;&gt;&lt;a href=&quot;#Thymeleaf模板引擎&quot; class=&quot;headerlink&quot; title=&quot;Thymeleaf模板引擎&quot;&gt;&lt;/a&gt;Thymeleaf模板引擎&lt;/h1&gt;&lt;h2 id=&quot;什么是Thymeleaf&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="技术环境" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-Web服务器</title>
    <link href="http://yoursite.com/2019/12/26/Tomcat-Web%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://yoursite.com/2019/12/26/Tomcat-Web%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2019-12-26T02:33:44.000Z</published>
    <updated>2019-12-26T06:55:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat-Web服务器"><a href="#Tomcat-Web服务器" class="headerlink" title="Tomcat-Web服务器"></a>Tomcat-Web服务器</h1><h2 id="Tomcat介绍"><a href="#Tomcat介绍" class="headerlink" title="Tomcat介绍"></a>Tomcat介绍</h2><h3 id="什么是Tomcat"><a href="#什么是Tomcat" class="headerlink" title="什么是Tomcat"></a>什么是Tomcat</h3><ul><li>Tomcat服务器是一个免费的开放源代码的Web应用服务器，由 Apache、Sun 和其他一些公司及个人共同开发而成</li><li>虽然 Tomcat 不能支持全部的 JavaEE 规范（仅支持Servlet 和 JSP 规范），但由于它小巧轻量、性能稳定，而且免费，因而深受 Java 爱好者的喜爱并得到了部分软件开发商的认可，是目前非常流行的 Web 应用服务器</li><li>我们学习阶段就是使用 Tomcat 作为服务器</li></ul><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>/bn：存放启动和关闭Tomcat的脚本文件</li><li>/conf：存放各种配置文件，其中有<code>server.xml</code>(Tomcat主要配置文件)、<code>tomcat-users.xml</code>、<code>web.xml</code>等</li><li>/lib：存放Tomcat服务器和所有WebApp程序需要访问的JAR文件</li><li>/logs：存放Tomcat的日志文件</li><li>/temp：存放Tomcat运行时产生的临时文件</li><li>/webapps：当发布WebApp时，通常把Web应用程序的目录及文件放在这个目录下</li><li>/work：Tomcat将JSP生成的Servlet源文件和字节码文件存到这个目录下</li></ul><h2 id="下载与配置"><a href="#下载与配置" class="headerlink" title="下载与配置"></a>下载与配置</h2><h3 id="Tomcat配置"><a href="#Tomcat配置" class="headerlink" title="Tomcat配置"></a>Tomcat配置</h3><ul><li>下载tomcat，进入<a href="https://tomcat.apache.org/" target="_blank" rel="noopener">官网下载</a></li><li>配置环境变量：<ul><li>新增”CATALINA_BASE”：Tomcat根目录</li><li>新增”CATALINA_HOME”：Tomcat根目录</li><li>追加”Path”：”%CATALINA_HOME%\lib;%CATALINA_HOME%\bin”</li><li>追加”ClassPath”：””</li></ul></li><li>检验成果：启动<code>tomcat\bin\startup.bat</code>,浏览器打开<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></li><li>可以在 <code>/conf/server.xml</code> 文件 <code>&lt;Connector&gt;</code> 中的 <code>port</code> 属性中修改默认端口号</li></ul><h3 id="Eclipse配置"><a href="#Eclipse配置" class="headerlink" title="Eclipse配置"></a>Eclipse配置</h3><ul><li>配置Tomcat：<code>Preferences(偏好)--Server--RuntiemEnvironments--//--Add--对应Tomcat版本</code></li><li>配置Servers：<code>Window--Show View--Web--Servers--对应版本Servers并双击指定服务器路径</code></li><li>删除Server：删除Server，删除RuntiemEnvironments</li></ul><h3 id="IDEA配置"><a href="#IDEA配置" class="headerlink" title="IDEA配置"></a>IDEA配置</h3><ul><li>打开运行环境：<code>Run--Edit Configurations...</code></li><li>添加Tomcat Server，添加Tomcat</li><li>然后在窗口中的<code>Deployment</code>选项卡中添加WebApp(自己的项目)</li></ul><h2 id="Web应用配置"><a href="#Web应用配置" class="headerlink" title="Web应用配置"></a>Web应用配置</h2><h3 id="什么是Web应用配置"><a href="#什么是Web应用配置" class="headerlink" title="什么是Web应用配置"></a>什么是Web应用配置</h3><ul><li>真实路径和虚拟路径的映射关系</li><li>web应用是真实的配置在自己计算机中的一个目录，如果让其他用户在浏览器中书写这个目录(web应用)的路径，不会直接按照路径去访问该目录，而是访问该路径对应映射的web应用目录</li><li>为了能够使访问者访问到我们服务器上的应用目录，需要为其提供一个虚拟路径， 这个虚拟路径和我们服务器中的一个web应用的对照关系</li><li>这种对照关系称之为映射关系</li></ul><h3 id="配置web应用的映射"><a href="#配置web应用的映射" class="headerlink" title="配置web应用的映射"></a>配置web应用的映射</h3><p><strong>第一种方式：</strong><br>&emsp;在 <code>conf/server.xml</code> 文件中 <code>&lt;Host&gt;</code> 标签内容中添加 <code>&lt;Context/&gt;</code> 子标签，该标签中添加两个属性：<code>path</code> 虚拟路径，<code>docBase</code>代表真实路径<br>示例：<code>&lt;Context path=&quot;/news1&quot; docBase=&quot;D:/news&quot; /&gt;</code></p><p><strong>第二种方式：</strong><br>&emsp;在 <code>conf/Catalina/localhost</code> 目录中创建一个以虚拟路径命名的.xml文件，文件当中添加真实路径。书写内容如下：<code>&lt;Context docBase=&quot;D:/news&quot;/&gt;</code><br>&emsp;如果虚拟路径是多级的，通过使用”#”来分级，例如：<code>email#aa.xml</code>表示虚拟路径为 <code>email/aa</code><br>&emsp;第二种发布方式支持热部署。所谓热部署是指在服务器打开的状态下，发布最新的配置和代码可以立即生效。</p><p><strong>第三种方式：</strong><br>&emsp;在<code>webapps</code> 目录中添加以虚拟路径命名的一个目录，这个目录的名称就是虚拟路径，而这个目录就是真实的web应用<br>&emsp;第三种发布方式也支持热部署。</p><h3 id="缺省web应用"><a href="#缺省web应用" class="headerlink" title="缺省web应用"></a>缺省web应用</h3><p>&emsp;一个虚拟主机中可以设置一个缺省web应用。所谓缺省web应用设置不必书写web应用的虚拟路径就能访问到一个web应用<br>&emsp;将虚拟路径删除，这个根路径就称为缺省虚拟路径。一个缺省虚拟路径只能对应一个web应用</p><p><strong>第一种方式：</strong><br>&emsp;类似配置web应用映射的第一种方式，将 <code>path</code> 的值设为空，例如：<code>path=&quot;&quot;</code></p><p><strong>第二种方式：</strong><br>&emsp;类似配置web应用映射的第二种方式，但创建的文件为 <code>ROOT.xml</code>，文件名称必须大写，文件中添加真是路径。书写方式相同</p><p><strong>第三种方式：</strong><br>&emsp;在<code>webapps</code> 目录中添加以<code>ROOT</code>命名的一个目录，目录名称必须大写，这个目录就是真实的web应用</p><p><strong><code>缺省web应用优先级：</code></strong> 第一种 &gt; 第二种 &gt; 第三种</p><h2 id="Web服务器主机配置"><a href="#Web服务器主机配置" class="headerlink" title="Web服务器主机配置"></a>Web服务器主机配置</h2><h3 id="虚拟主机配置"><a href="#虚拟主机配置" class="headerlink" title="虚拟主机配置"></a>虚拟主机配置</h3><p>一个服务器中可以配置多台虚拟主机<br>一个虚拟主机就是一个网站，访问一个网站需要一个域名</p><p>配置虚拟主机的过程：</p><ul><li>修改<code>conf/server.xml</code>文件，在其中<code>&lt;Engine&gt;</code>标签下添加一个<code>&lt;Host&gt;</code>子标签</li><li>例如：<code>&lt;Host name=&quot;www.baidu.com&quot;  appBase=&quot;baidu&quot;&gt;&lt;/Host&gt;</code></li><li><code>name</code>为虚拟主机的名称，称之为域名；<code>appBase</code>为虚拟主机管理的目录</li><li>访问一个域名，其实会将域名转换为一个ip地址。这个转换的过程是由互联网站DNS服务器完成的</li><li><code>&lt;Engine&gt;</code>标签身上的 <code>defaultHost</code> 属性表示缺省虚拟主机，这个属性中可以保存任意一个已经存在的虚拟主机名称，在使用不明确的域名访问服务器的时候，就会采用缺省虚拟主机提供服务</li><li><code>&lt;Host&gt;</code>标签身上有些属性，其中两个必须属性：<ul><li><code>appBase：</code> web应用程序文件存放的位置，相对路径为CATALINA_HOMEM</li><li><code>name：</code> virtual host的名称</li></ul></li></ul><h2 id="Tomcat注意事项"><a href="#Tomcat注意事项" class="headerlink" title="Tomcat注意事项"></a>Tomcat注意事项</h2><h3 id="Web中文乱码问题"><a href="#Web中文乱码问题" class="headerlink" title="Web中文乱码问题"></a>Web中文乱码问题</h3><ol><li>Tomcat8.0以前的版本存在Get请求中文乱码问题，需要在服务器server.xml中的<code>&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;</code>标签内添加属性<code>URIEncoding=&quot;UTF-8&quot;</code></li><li>Post请求中文乱码问题，需要在获取请求数据前，输入代码<code>request.setCharacterEncoding(&quot;UTF-8&quot;);</code></li></ol><h3 id="日志文件乱码问题"><a href="#日志文件乱码问题" class="headerlink" title="日志文件乱码问题"></a>日志文件乱码问题</h3><p>在IDEA中会出现Tomcat日志中文乱码问题，如更改Tomcat编码，进入conf/logging.properties文件，更改设置为<code>java.util.logging.ConsoleHandler.encoding = GBK</code><br>但<strong>不建议</strong>这种操作，建议在IDEA端，将Tomcat的启动命令添加UTF-8，统一使用UTF-8显示</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomcat-Web服务器&quot;&gt;&lt;a href=&quot;#Tomcat-Web服务器&quot; class=&quot;headerlink&quot; title=&quot;Tomcat-Web服务器&quot;&gt;&lt;/a&gt;Tomcat-Web服务器&lt;/h1&gt;&lt;h2 id=&quot;Tomcat介绍&quot;&gt;&lt;a href=&quot;#T
      
    
    </summary>
    
    
      <category term="技术环境" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>Servlet及其规范</title>
    <link href="http://yoursite.com/2019/12/26/Servlet%E5%8F%8A%E5%85%B6%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2019/12/26/Servlet%E5%8F%8A%E5%85%B6%E8%A7%84%E8%8C%83/</id>
    <published>2019-12-26T01:06:51.000Z</published>
    <updated>2019-12-26T06:54:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet规范"><a href="#Servlet规范" class="headerlink" title="Servlet规范"></a>Servlet规范</h1><h2 id="Servlet简介"><a href="#Servlet简介" class="headerlink" title="Servlet简介"></a>Servlet简介</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><ul><li>Servlet(Server Applet)： 服务器端的Java程序</li><li>Servlet程序无法独立运行，必须将Servlet程序放在服务器中，由服务器调用才可以执行</li><li>Sun(Oracle)公司制定的一种用来扩展Web服务器功能的组件规范</li><li>组件：在软件开发行业，符合一定规范，实现部分功能，并且需要部署到容器当中，能运行的软件模块</li><li>容器：符合一定规范，提供组件运行环境的一个程序<ul><li>Servlet容器：存储并运行servlet的环境，称之为servlet容器。Tomcat</li><li>Web容器：存储并运行web资源的环境，称之为web容器。Tomcat</li></ul></li></ul><blockquote><p>Servlet的唯一性，一个Web应用对应一个Servlet，容器关闭或被卸载，Servlet才会销毁，对应的servlet上下文对象一起被销毁</p></blockquote><h3 id="Servlet调用过程"><a href="#Servlet调用过程" class="headerlink" title="Servlet调用过程"></a>Servlet调用过程</h3><ol><li>用户发出HTTP请求，根据请求分析，<code>http://ip:port/appName/url-pattern</code><br>例：<code>http://localhost/Hello/HelloServlet</code><ul><li>根据Host头得知访问哪个虚拟主机，<code>localhost</code></li><li>根据资源路径得知哪个Web应用，<code>/Hello</code></li><li>根据资源路径得知访问哪个资源，<code>/HelloServlet</code></li></ul></li><li>分析请求后，资源名根据 <code>web.xml</code> 中的配置进行匹配，获得真实路径<br>在<code>&lt;servlet-mapping&gt;</code>中找到符合自身的<code>&lt;url-pattern&gt;</code>并找到对应的<code>&lt;servlet-name&gt;</code>，三种匹配方式(参考下文)<br>然后在<code>&lt;servlet&gt;</code>中找到相同<code>&lt;servlet-name&gt;</code>的<code>&lt;servlet-class&gt;</code>其内容就是真实路径<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.study.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>如果两个路径不一致，则会交给DefaultServlet处理</li><li>调用Servlet之后，servlet中的service方法会执行，向数据写入响应缓冲区</li><li>服务器将response的响应消息根据HTTP协议发送回客户端</li><li><strong>注意：</strong>即使请求的是资源文件，如<code>index.html</code>其也会先去url-pattern中匹配，匹配不到再当做真实路径寻找</li></ol><h3 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h3><p>&emsp;- 当前Servlet在被初次访问的时候，会创建一个当前servlet对象，驻留在tomcat内存当中，被重复调用<br>&emsp;- 初次创建servlet对象时，会立刻调用init方法完成初始化操作，init方法被GenericServlet实现，将容器传过来的ServletConfig对象保存下载<br>&emsp;- 每次调用servlet，都会导致service方法执行，收到请求会调用Servlet对象的<code>service()</code>方法<br>&emsp;- 当服务器关闭或者web应用被移除容器的时候，servlet会随着web应用的销毁而销毁<br>&emsp;- 在销毁之前会自动调用destroy方法完成善后的操作</p><p>&emsp;<strong>注意：</strong>人为调用destroy方法不会销毁servlet对象</p><h3 id="Servlet三大域"><a href="#Servlet三大域" class="headerlink" title="Servlet三大域"></a>Servlet三大域</h3><p>&emsp;<strong>Servlet（作用）域对象：</strong>主要用于<code>Servlet</code>相互调用的时候传输数据，区分JSP的四大作用域对象概念(多一个pageContext)，详情参考–《JSP学习笔记》</p><p><strong>ServletRequest：</strong><br>&emsp;声明周期：请求内部，请求结束后结束（单次请求）<br>&emsp;主要方法：设置域参数 <code>void setAttribute(String，Object)</code><br>&emsp;&emsp;获取域参数 <code>Object getAttribute(String)</code></p><p><strong>HttpSession：</strong><br>&emsp;声明周期：客户端存在，session即存在（跨请求）<br>&emsp;主要方法：获取Session对象： <code>Session request.getSeesion();</code><br>&emsp;&emsp;操作域参数 <code>set/get/removeAttribute()</code></p><p><strong>ServletContext：</strong><br>&emsp;声明周期：整个Web应用（跨客户端），只要Web应用存在他就存在，一个Web应用对应一个ServletContext<br>&emsp;主要方法：获取ServletContext对象： <code>session.getServletContext()</code> 或 <code>this.getServletContext()</code>。归纳总结四种方式：通过 GenericServlet、ServletConfig、HTTPSession、FilterConfig 的 <code>getServletContext()</code> 方法<br>&emsp;&emsp;操作域参数 <code>set/get/removeAttribute()</code></p><blockquote><p><strong>注意：</strong>使用域对象传递数据对象的原(准)则：1：能<code>满足需求</code>。2：都能够实现的情况下，选择<code>范围最小</code>的</p></blockquote><h2 id="Servlet映射规范"><a href="#Servlet映射规范" class="headerlink" title="Servlet映射规范"></a>Servlet映射规范</h2><h3 id="Web-xml映射"><a href="#Web-xml映射" class="headerlink" title="Web.xml映射"></a>Web.xml映射</h3><ul><li>这个文件是一个web应用的配置文件(servlet3.0规范之后可以选用用过注解声明Servlet)</li><li>配置内容：servlet映射、缺省主页、过滤器、监听器等</li><li>关于配置初始参数等参考本文-ServletConfig ServletContext对象</li><li><strong>welcome-file-list</strong>：表示设置缺省主页</li><li><strong>welcome-file</strong>：表示应用哪一个页面作为主页</li><li><strong>servlet</strong>：表示定义哪个类是Servlet，并定义该servlet属性</li><li><strong>servlet-mapping</strong>：定义Servlet的映射</li><li>设置<code>&lt;load-on-startup &gt;1&lt;/load-on-startup&gt;</code>标签，用于表示当服务器开启时就加载该Servlet(通常只会在首次调用时加载到内存)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span> <span class="attr">version</span>=<span class="string">"2.5"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>servletTest<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.study.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="标注映射"><a href="#标注映射" class="headerlink" title="@标注映射"></a>@标注映射</h3><p>&emsp;在Servlet3.0规范之前，都是在web.xml中添加如下的配置；在servlet3.0后，我们可以不用再web.xml里面配置servlet，只需要加上@WebServlet注解就可以修改该servlet的属性了，常更改<code>@WebServlet(value=&quot;/SecondServlet&quot;)</code>，常直接默认值<code>@WebServlet(&quot;/SecondServlet&quot;)</code>。文件标签或标注映射两种方法任选一种，但是不能同时设置。注解属性如下：</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>String</td><td>指定Servlet 的 name 属性，等价于 <code>&lt;servlet-name&gt;</code>。如果没有显式指定，则该 Servlet 的取值即为类的全限定名。</td></tr><tr><td>value</td><td>String[]</td><td>该属性等价于 urlPatterns 属性。两个属性不能同时使用。</td></tr><tr><td>urlPatterns</td><td>String[]</td><td>指定一组 Servlet 的 URL 匹配模式。等价于<code>&lt;url-pattern&gt;</code>标签。</td></tr><tr><td>loadOnStartup</td><td>int</td><td>指定 Servlet 的加载顺序，等价于<code>&lt;load-on-startup&gt;</code>标签。</td></tr><tr><td>initParams</td><td>WebInitParam[]</td><td>指定一组 Servlet 初始化参数，等价于<code>&lt;init-param&gt;</code>标签。</td></tr><tr><td>asyncSupported</td><td>boolean</td><td>声明 Servlet 是否支持异步操作模式，等价于<code>&lt;async-supported&gt;</code>标签。</td></tr><tr><td>description</td><td>String</td><td>该 Servlet 的描述信息，等价于<code>&lt;description&gt;</code>标签。</td></tr><tr><td>displayName</td><td>String</td><td>该 Servlet 的显示名，通常配合工具使用，等价于<code>&lt;display-name&gt;</code>标签。</td></tr></tbody></table><h3 id="通配Servlet虚拟路径"><a href="#通配Servlet虚拟路径" class="headerlink" title="通配Servlet虚拟路径"></a>通配Servlet虚拟路径</h3><ol><li>完全路径匹配：精确路径表示，如<code>/HelloServlet</code></li><li>目录匹配：以<code>/*</code>结尾的路径，如<code>/Hello/*</code></li><li>扩展名匹配：不以<code>/</code>开头，且带有扩展名(一般为.do)，如<code>*.do</code></li><li>全匹配：使用<code>.*</code>进行匹配，通常编码规则Filter使用</li><li>如果多种匹配指向不同路径，则根据优先级，完全路径匹配 &gt; 目录匹配 &gt; 扩展名匹配</li><li><strong>注意：</strong>一定记得没有 <code>/dir/*.do</code> 这样的写法！！因为目录匹配要<code>/*</code>结尾，扩展名匹配不以<code>/</code>开头！！</li></ol><h2 id="Servlet继承关系"><a href="#Servlet继承关系" class="headerlink" title="Servlet继承关系"></a>Servlet继承关系</h2><h3 id="Servlet的继承"><a href="#Servlet的继承" class="headerlink" title="Servlet的继承"></a>Servlet的继承</h3><ul><li>Servlet –&gt; GenericServlet –&gt; HttpServlet –&gt; XXXServlet</li><li>Servlet：通用的Servlet接口, 提供了一个Servlet应该具有的功能</li><li>GenericServlet：实现了Servlet接口, 并实现了其中的大部分的方法, 但是service方法没有实现, 如果继承了GenericServlet，service方法需要开发人员自己来实现</li><li>HttpServlet：继承了GenericServlet, 并实现了service方法, 在service方法中, 会判断请求方式，根据不同的请求方式, 调用不同doXxx</li></ul><h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><p>&emsp;如果需要获取任何请求相关的信息, 可以通过request(调用方法)来获取</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>String getMethod()</td><td>(请求行)获取请求方式，返回GET或POST</td></tr><tr><td>String getURI()</td><td>(请求行)获取请求资源路径，返回资源路径(appName + url-pattern)</td></tr><tr><td>String getRequestURL()</td><td>(请求行)获取请求资源路径的完整URL</td></tr><tr><td>String getProtocol()</td><td>(请求行)获取资协议及版本，返回HTTP/1.1</td></tr><tr><td>String getHeader(String key)</td><td>(请求头)获取请求头中key对应的value</td></tr><tr><td>ServletInputStream getInputStream()</td><td>(请求正文)获取发送请求实体的输入流，用于获取请求实体内容</td></tr><tr><td>String getParameter(String key)</td><td>返回参数key对应的value</td></tr><tr><td>String[] getParameterValues(String key)</td><td>返回同名参数key对应的value数组，常用于多选框</td></tr><tr><td>Map&lt;String key,String[] value&gt; getParameterMap()</td><td>将查询的参数保存在一个Map中并返回</td></tr><tr><td>Enumeration<String> getParameterNames()</td><td>返回获取所有的key</td></tr><tr><td>setCharacterEncoding(String charset)</td><td>设置字符集，在获取参数前设定，解决POST提交时乱码问题</td></tr><tr><td>关于请求转发、域对象方法</td><td>参考本文Servlet相关技术内容</td></tr><tr><td>String getQueryString()</td><td>返回请求行中的参数部分</td></tr><tr><td>String getRemoteAddr()</td><td>返回发出请求的客户机的IP地址</td></tr><tr><td>String <font color="red"><strong>getContextPath()</strong></font></td><td>获得当前web应用虚拟目录名称<br>在写路径时不要将web应用的虚拟路径的名称写死<br>应该在需要写web应用的名称的地方通过getContextPath方法动态获取</td></tr></tbody></table><h3 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h3><p>&emsp;如果有任何数据要发送给浏览器, 可以通过response对象进行发送</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void setStatus(int status[,String sm])</td><td>(响应行)设置状态码[,状态字段]</td></tr><tr><td>void setHeader(String name,String value)</td><td>(响应头)通用的设置响应头的方法</td></tr><tr><td>void setContentType(String mimetype)</td><td>(响应头)设置返回文件类型<br>常用值：<code>text/html;charset=utf-8</code></td></tr><tr><td>ServletOutputStream getOutputStream(响应正文)</td><td>获取字节输出流</td></tr><tr><td>PrintWriter getWriter()</td><td>(响应正文)获取字符输出流</td></tr><tr><td>void setCharactEncoding(String charset)</td><td>设定响应字符集类型</td></tr><tr><td>void sendRedirect(url)</td><td>302重定向指令，指向url(参考本文路径处理)</td></tr></tbody></table><h3 id="ServletConfig对象"><a href="#ServletConfig对象" class="headerlink" title="ServletConfig对象"></a>ServletConfig对象</h3><p>&emsp;代表当前<strong>servlet</strong>配置信息的对象，可以将一些配置信息写入当前servlet的初始化配置信息参数中，这样可以省略配置文件，而在servlet启动时利用初始化配置信息读取配置的内容</p><p><strong>获取ServletConfig方法：</strong><code>this.getServletConfig();</code><br><strong>获取参数方法：</strong><code>servletConfig.getInitParameter(String name);</code> 以及 <code>servletConfig.getInitParameterNames();</code><br><strong>配置方法：</strong><br>&emsp;servlet3.0之前：在web.xml文件中的servlet标签内添加参数标签<br>&emsp;servlet3.0之后：在注解中添加初始化配置信息方式</p><p><code>@WebServlet(value = &quot;/ServletConfigDemo1&quot;,initParams = {@WebInitParam(name=&quot;name&quot;,value=&quot;value&quot;)})</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.study.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义两个参数开始 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义两个参数结束 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/HelloServlet<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="SerlvetContext对象"><a href="#SerlvetContext对象" class="headerlink" title="SerlvetContext对象"></a>SerlvetContext对象</h3><p>&emsp;代表当前<strong>web应用</strong>配置信息的对象，可以将一些配置信息写入web应用层面，供不同servlet一起使用<br>&emsp;还可以用于获取web应用路径使用：通过<code>servletContext.getRealPath();</code>动态获取方法<br>&emsp;作用域为整个web应用，生命周期为：服务器启动，web应用被加载 到 服务器关闭，web应用被移除</p><p><strong>获取SerlvetContext方法：</strong><code>this.getServletConfig().getSerlvetContext();</code> 以及 <code>this.getSerlvetContext();</code><br><strong>操作参数方法：</strong><code>getInitParameter();</code>、<code>setAttribute(String name,Object obj);</code>、<code>removeAttribute(String name);</code>、<code>getAttributeNames();</code><br><strong>配置方法：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span><span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Cookie对象"><a href="#Cookie对象" class="headerlink" title="Cookie对象"></a>Cookie对象</h3><p><strong>生命周期：</strong></p><p><strong>相关语法：</strong>对于Cookie的一系列操作</p><p>&emsp;<strong>创建Cookie：</strong> <code>Cookie cookie = new Cookie(String name String value);</code><br>&emsp;<strong>设定时间：</strong> <code>void Cookie.setMaxAge(int seconds)</code><br>&emsp;<strong>添加Cookie：</strong> <code>response.addCookie(cookie);</code></p><p>&emsp;<strong>获取Cookie：</strong> <code>Cookie[] request.getCookies();</code><br>&emsp;<strong>获取名称：</strong> <code>String Cookie.getName();</code><br>&emsp;<strong>获取值：</strong> <code>String Cookie.getValue();</code></p><h3 id="Session对象"><a href="#Session对象" class="headerlink" title="Session对象"></a>Session对象</h3><h2 id="Servlet相关技术"><a href="#Servlet相关技术" class="headerlink" title="Servlet相关技术"></a>Servlet相关技术</h2><h3 id="请求转发、域对象"><a href="#请求转发、域对象" class="headerlink" title="请求转发、域对象"></a>请求转发、域对象</h3><p><strong>请求转发：</strong>是指定服务器中的某一个资源（Servlet或JSP）在处理请求的过程中，将请求转发给一个其他的资源，让其他资源来处理请求</p><p><strong>域对象：</strong>能够在指定的范围内, 利用自身的map实现数据的共享<br>在request对象内部保存了一个map，专门用于存取数据。这个map我们可以称之为是request域，其他域对象参考《JSP学习笔记》</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请求转发实现代码</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"转发到资源的路径"</span>).forward(req, res);</span><br><span class="line"><span class="comment">//往request域中添加一个域属性。属性名只能是字符串，属性值可以是任意类型</span></span><br><span class="line">request.setAttribute(String attrName, Object attrValue);</span><br><span class="line"><span class="comment">//通过属性名获取存放在request域中的属性值</span></span><br><span class="line">request.getAttribute(String attrName);</span><br><span class="line"><span class="comment">//删除域属性</span></span><br><span class="line">request.removeAttribute(String name);</span><br><span class="line"><span class="comment">//获取全部域属性的名称</span></span><br><span class="line">request.getAttributeNames();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Servlet中将数据存入request对象的map中</span></span><br><span class="line">request.setAttribute(<span class="string">"name"</span>, name);</span><br><span class="line">request.setAttribute(<span class="string">"age"</span>, age);</span><br><span class="line"><span class="comment">//通过转发讲request对象(及其中的数据)带到JSP进行显示</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/show.jsp"</span>).forward(request, response);</span><br><span class="line"><span class="comment">//在jsp中，将传过来附带数据的request中的数据显示出来</span></span><br><span class="line">&lt;p&gt;姓名：&lt;%= request.getAttribute("name") %&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;年龄：&lt;%= request.getAttribute("age") %&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure><blockquote><p>(1)请求转发是一次请求，一次响应<br>(2)转发前后地址栏地址不会发生变化</p></blockquote><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>服务器向浏览器发送一个302状态码及一个Location消息头(该消息头的值是一个地址，称之为重定向地址)</p><p>浏览器收到后会立即向重定向地址发送请求</p><p>通过代码 <code>Response.sendRedirect(url)</code> 实现重定向，URL的三种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.从当前Servlet重定向当前应用下的test.jsp</span></span><br><span class="line">response.sendRedirect(<span class="string">"test.jsp"</span>);</span><br><span class="line">response.sendRedirect(<span class="string">"http://localhost/app1/test.jsp"</span>);</span><br><span class="line">response.sendRedirect(<span class="string">"/app1/test.jsp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.从当前Servlet重定向**app2应用**下的test.jsp，跨应用</span></span><br><span class="line">response.sendRedirect(<span class="string">"http://localhost/app2/test.jsp"</span>);</span><br><span class="line">response.sendRedirect(<span class="string">"/app2/test.jsp"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.从当前Servlet重定向百度的首页</span></span><br><span class="line">response.sendRedirect(<span class="string">"http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>(1)重定向前后是两次请求，两次响应，所以不会共享一个web组件(request/response等)<br>(2)重定向前后，浏览器的地址栏地址会发生变化。（因为两次请求都是通过浏览器发起，浏览器知道这个跳转的过程，因此地址栏地址会变化）</p></blockquote><h3 id="定时刷新-refresh响应头"><a href="#定时刷新-refresh响应头" class="headerlink" title="定时刷新(refresh响应头)"></a>定时刷新(refresh响应头)</h3><p>如下代码，实现三秒后跳转到百度首页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"refresh"</span>,<span class="string">"3;url=http://www.baidu.com"</span>);</span><br></pre></td></tr></table></figure><h3 id="资源路径"><a href="#资源路径" class="headerlink" title="资源路径"></a>资源路径</h3><ul><li><code>http://ip:port/appName/xxxx</code> 其中 <code>appName/xxxx</code> 为请求资源路径</li><li><strong>相对路径：</strong> <code>conf.properties</code> 直接书写相对路径，程序会从tomcat启动的目录下，寻找指定名称的资源</li><li><strong>绝对路径：</strong> <code>/conf.properties</code> 书写/资源文件名称，程序会从当前磁盘的根目录下寻找指定名称的文化</li><li><strong>全路径：</strong> <code>D:/........../conf.properties</code> 书写资源全路径名称，程序会按照指定的路径找到对应的资源文件</li><li><strong>推荐：</strong> 通过<code>ServletContext</code>动态获取webapp路径</li></ul><h3 id="Cookie-Session"><a href="#Cookie-Session" class="headerlink" title="Cookie Session"></a>Cookie Session</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Servlet规范&quot;&gt;&lt;a href=&quot;#Servlet规范&quot; class=&quot;headerlink&quot; title=&quot;Servlet规范&quot;&gt;&lt;/a&gt;Servlet规范&lt;/h1&gt;&lt;h2 id=&quot;Servlet简介&quot;&gt;&lt;a href=&quot;#Servlet简介&quot; class
      
    
    </summary>
    
    
      <category term="技术环境" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java数据库-JDBC</title>
    <link href="http://yoursite.com/2019/12/19/Java%E6%95%B0%E6%8D%AE%E5%BA%93-JDBC/"/>
    <id>http://yoursite.com/2019/12/19/Java%E6%95%B0%E6%8D%AE%E5%BA%93-JDBC/</id>
    <published>2019-12-19T11:47:03.000Z</published>
    <updated>2019-12-26T06:53:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java数据库-JDBC"><a href="#Java数据库-JDBC" class="headerlink" title="Java数据库-JDBC"></a>Java数据库-JDBC</h1><h2 id="JDBC简介"><a href="#JDBC简介" class="headerlink" title="JDBC简介"></a>JDBC简介</h2><h3 id="JDBC简介-1"><a href="#JDBC简介-1" class="headerlink" title="JDBC简介"></a>JDBC简介</h3><ul><li>Java Database Connectivity：Java访问数据库的解决方案</li><li>JDBC是SUN公司做的关于Java与数据库的接口</li><li>具体实现是由各大数据库公司来制作，做出jar包称为连接数据库的驱动</li><li>向对应数据库官网下载该jar包，导入到项目中</li></ul><h3 id="JDBC实现的接口"><a href="#JDBC实现的接口" class="headerlink" title="JDBC实现的接口"></a>JDBC实现的接口</h3><table><thead><tr><th>实现功能</th><th>对应接口</th></tr></thead><tbody><tr><td>驱动管理</td><td>DriverManager</td></tr><tr><td>连接接口</td><td>Connection<br>DatabaseMetaData</td></tr><tr><td>语句对象接口</td><td>Statement<br>PreparedStatement<br>CallableStatement</td></tr><tr><td>结果集接口</td><td>ResultSet<br>ResultSetMetaData</td></tr></tbody></table><h3 id="MySQL与Oracle实现"><a href="#MySQL与Oracle实现" class="headerlink" title="MySQL与Oracle实现"></a>MySQL与Oracle实现</h3><p><strong>Oracle实现</strong></p><ul><li>ojdbc6.jar / ojdbc14.jar</li><li>Class.forName(“oracle.jdbc.OracleDriver”)</li></ul><p><strong>MySQL实现</strong></p><ul><li>mysql-connector-java-5.1.8-bin.jar</li><li>Maven可搜索jar包<code>mysql-connector-java</code></li><li>Class.forName(“com.mysql.cj.jdbc.Driver”)</li></ul><h2 id="连接使用JDBC"><a href="#连接使用JDBC" class="headerlink" title="连接使用JDBC"></a>连接使用JDBC</h2><h3 id="传统使用步骤"><a href="#传统使用步骤" class="headerlink" title="传统使用步骤"></a>传统使用步骤</h3><ul><li>一般情况下我们在整个连接中都需要try,catch，其中1~5步在try中，第6步在finally中</li><li>错误类型为SQLException，finally中close()或者使用java新语法try()定义三者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.注册驱动</span></span><br><span class="line">Drive drive = <span class="keyword">new</span> com.mysql.jdbc.Drive;<span class="comment">//最新com.mysql.cj.jdbc.Driver</span></span><br><span class="line">DriveManager.registerDriver(drive);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/database"</span>;</span><br><span class="line">String user = <span class="string">"root"</span>;</span><br><span class="line">String password = <span class="string">"psd"</span>;</span><br><span class="line">Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line"><span class="comment">//url连接最新版需要在地址后面增加`?serverTimezone=GMT%2B8`表示系统时区</span></span><br><span class="line"><span class="comment">//定义写入字符集`?useUnicode=true&amp;characterEncoding=UTF-8`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取数据库操作对象</span></span><br><span class="line">Statement stmt = conn.createStatement();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行SQL语句[DQL]</span></span><br><span class="line">String sql = <span class="string">"select * from table were a = 1"</span>;</span><br><span class="line">ResultSet rs = stmt.excuteQuery(sql);</span><br><span class="line"><span class="comment">//执行SQL语句[DML]</span></span><br><span class="line">String sql = <span class="string">"insert into table values(1,2,3)"</span>;</span><br><span class="line"><span class="keyword">int</span> count = stmt.executeUpdate(sql);</span><br><span class="line"><span class="comment">//执行SQL语句</span></span><br><span class="line"><span class="keyword">boolean</span> flag = stmt.excute(sql);</span><br><span class="line"><span class="comment">//SQL语句结尾不用加分号，注意空格干扰语义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.处理查询结果</span></span><br><span class="line"><span class="keyword">while</span>(rs.next())&#123;</span><br><span class="line">    String a1 = rs.getString(<span class="number">1</span>);<span class="comment">//以列的下标，JDBC下标都以1开始</span></span><br><span class="line">    String a2 = rs.getString(<span class="string">"col2"</span>);<span class="comment">//以列的名称</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//next方法如果当前行有数据返回true，否则false。getXXX()取得字段内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.释放资源</span></span><br><span class="line"><span class="comment">//先关闭ResultSet，后关闭Statement，最后关闭Connection</span></span><br><span class="line"><span class="comment">//三个关闭分别try,catch，在try中都先判断是否为空</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (rs!=<span class="keyword">null</span>) rs.close();</span><br><span class="line">    <span class="keyword">if</span> (ps!=<span class="keyword">null</span>) ps.close();</span><br><span class="line">    <span class="keyword">if</span> (conn!=<span class="keyword">null</span>) conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;                </span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用使用方法"><a href="#常用使用方法" class="headerlink" title="常用使用方法"></a>常用使用方法</h3><ul><li>第一步可以通过mysql写的静态代码块进行注册驱动：<br><code>Class.forName(&quot;com.mysql.cj.jdbc.Driver&quot;);</code></li><li>第一步在MySQL的5.1.6及以后的jar包中自动进行注册驱动，可以不用写</li><li>关于url的书写写法：<ul><li>Oracle写法：<code>jdbc:oracle:thin:@localhost:1521:sid</code></li><li>SQLServer写法：<code>jdbc:microsoft:sqlserver://localhost:1433; DatabaseName=sid</code></li><li>MySQL写法：<code>jdbc:mysql://localhost:3306/sid</code></li><li>Mysql的url地址的简写形式：<code>jdbc:mysql:///sid</code></li><li>url定义时区：<code>?serverTimezone=GMT%2B8</code></li><li>url定义字符集：<code>?useUnicode=true&amp;characterEncoding=UTF-8</code></li></ul></li><li>第一、二步中的参数可以读取properties配置文件获取</li><li>第三、四步中为了防止SQL注入可以更改预编译SQL语句</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"select * from table where user=? and password=?"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setString(<span class="number">1</span>,username);    <span class="comment">//设置第一个?，JDBC下标都以1开始</span></span><br><span class="line">ps.setString(<span class="number">2</span>,userpwd);    <span class="comment">//设置第二个?</span></span><br><span class="line">ResultSet rs = stmt.excuteQuery();</span><br></pre></td></tr></table></figure><h3 id="最终使用"><a href="#最终使用" class="headerlink" title="最终使用"></a>最终使用</h3><ol><li>驱动自动注册，不再注册</li><li>通过properties文件获取连接器</li><li>根据需求，有参数的SQL语句用预编译的数据库操作对象，无参可以用普通的</li><li>执行语句并处理结果</li><li>一定记得关闭数据库连接，可以通过jdk1.7特性，在try小括弧中定义</li></ol><h3 id="自用工具类-创建JDBCUtils"><a href="#自用工具类-创建JDBCUtils" class="headerlink" title="自用工具类-创建JDBCUtils"></a>自用工具类-创建JDBCUtils</h3><p>由于数据库的连接与关闭代码比较类似，所以我们常自己书写一个工具类去实现操作，减少代码冗余<br>工具类常定义为一个静态类，以下是一个工具类的案例，实现了通过配置文件，获取连接对象与关闭连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工具类不能够产生对象，只能通过类名.的方式调用方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JDBCUtils</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过配置文件获取数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties prop = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            File file = new File(JDBCUtils.class.getClassLoader().getResource("conf.properties").getPath());</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">            <span class="comment">//FileInputStream fis=JDBCUtils.class.getClassLoader().getResourceAsStream("conf.properties");</span></span><br><span class="line">            prop.load(fis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//PUBLIC返回连接对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, SQLException </span>&#123;</span><br><span class="line">        Class.forName(prop.getProperty(<span class="string">"driver"</span>));</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(</span><br><span class="line">                prop.getProperty(<span class="string">"url"</span>),</span><br><span class="line">                prop.getProperty(<span class="string">"user"</span>),</span><br><span class="line">                prop.getProperty(<span class="string">"password"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//PUBLIC关闭资源方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Connection conn, Statement stat, ResultSet rs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                rs = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stat != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                stat = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(conn != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                conn = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多数据操作"><a href="#更多数据操作" class="headerlink" title="更多数据操作"></a>更多数据操作</h2><h3 id="数据库元数据"><a href="#数据库元数据" class="headerlink" title="数据库元数据"></a>数据库元数据</h3><ul><li>通过数据库连接对象的<code>getMetaData()</code>方法返回数据库元数据对象</li><li>数据库名称：<code>String dbmd.getDatabaseProductName()</code></li><li>数据库驱动版本：<code>String dbmd.getDriverVersion()</code></li><li>数据库用户名：<code>String dbmd.getUserName()</code></li><li>其他各种方法</li></ul><h3 id="表元数据"><a href="#表元数据" class="headerlink" title="表元数据"></a>表元数据</h3><ul><li>通过结果集的<code>getMetaData()</code>方法返回结果集表元数据对象</li><li>表中字段的总数：<code>int rsmd.getColumnCount()</code></li><li>表中第i个字段的名称：<code>String rsmd.getColumnName(i)</code></li><li>表中第i个字段的类型：<code>String rsmd.getColumnTypeName(i)</code></li><li>注意SQL中以1开始</li><li>其他各种方法</li></ul><h3 id="获取自增主键值"><a href="#获取自增主键值" class="headerlink" title="获取自增主键值"></a>获取自增主键值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//PreparedStatement对象获取自增是通过创建时，第二个参数指明可以获取自增键</span></span><br><span class="line">PreparedStatement preparedStatement = con.prepareStatement(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class="line"><span class="comment">//PreparedStatement对象获取自增的第二种方法，第二个参数传入GeneratedKeys的字段名列表，字符串数组</span></span><br><span class="line">PreparedStatement preparedStatement = con.prepareStatement(sql,<span class="keyword">new</span> String[]&#123;<span class="string">"id"</span>&#125;);</span><br><span class="line"><span class="comment">//Statement对象获取自动是通过执行语句时，第二个参数指明可以获取自增键</span></span><br><span class="line">statement.executeUpdate(sql,Statement.RETURN_GENERATED_KEYS);</span><br><span class="line"><span class="comment">//获取自增键结果集</span></span><br><span class="line">ResultSet rs = preparedStatement/statement.getGeneratedKeys();</span><br><span class="line"><span class="comment">//游标下移，获取数据</span></span><br><span class="line">rs.next();</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h2><h3 id="批量更新的引入"><a href="#批量更新的引入" class="headerlink" title="批量更新的引入"></a>批量更新的引入</h3><ul><li>批处理：发送到数据库作为一个单元执行的一组更新语句</li><li>批处理降低了应用程序和数据库之间的网络调用</li><li>相比单个SQL语句的处理，批处理更为有效</li></ul><h3 id="批量更新API"><a href="#批量更新API" class="headerlink" title="批量更新API"></a>批量更新API</h3><ul><li>添加SQL语句到数据库操作对象中<ul><li><code>Statement.addBatch(String sql)</code></li><li><code>PreparedStatement.addBatch()</code></li></ul></li><li>把对象中语句列表中的所有SQL语句发送给数据库进行处理<ul><li><code>executeBatch()</code></li></ul></li><li>清空当前SQL语句列表<ul><li><code>clearBatch()</code></li></ul></li></ul><h3 id="使用批量更新注意"><a href="#使用批量更新注意" class="headerlink" title="使用批量更新注意"></a>使用批量更新注意</h3><ul><li>防止OutOfMemory错误<ul><li>如果操作对象中待处理的SQL语句过多，可能会产生内存溢出错误</li><li>一定要及时处理SQL语句列表</li></ul></li></ul><h2 id="连接池技术"><a href="#连接池技术" class="headerlink" title="连接池技术"></a>连接池技术</h2><h3 id="连接池的引入"><a href="#连接池的引入" class="headerlink" title="连接池的引入"></a>连接池的引入</h3><ul><li>数据库连接的建立及关闭资源消耗巨大</li><li>传统访问数据库的方式：一次数据库访问对应一个物理连接，每次操作数据库都要打开、关闭该物理连接</li><li>数据库连接池(Connection Pool)：系统初始运行时，主动建立足够的连接，组成一个池。每次应用程序请求数据库连接时，无需重新打开连接，而是从池中取出已有的连接，使用完后，不再关闭，而是归还</li><li>如果一时间并发量很大，则连接池中会创建很多的连接，等待高并发过后，大量连接无人使用，则这些连接会闲置。此时连接池会在指定的时间内自动销毁一半的连接，直到恢复至初始连接数量</li><li>动态检查：定时检查连接池，一旦发现数量小于最小连接数，则补充响应的新连接，保证连接池正常运转</li><li>静态检查：空闲连接不足时，系统才检测是否达到最小连接数</li></ul><h3 id="连接池参数"><a href="#连接池参数" class="headerlink" title="连接池参数"></a>连接池参数</h3><ol><li>初始连接数</li><li>最大连接数</li><li>最小连接数</li><li>每次增加的连接数</li><li>超时时间</li><li>最大空闲连接</li><li>最小空闲连接</li></ol><h3 id="DBCP连接池"><a href="#DBCP连接池" class="headerlink" title="DBCP连接池"></a>DBCP连接池</h3><p>导入DBCP连接池jar包<br>Commons-dbcp.jar：连接池的实现<br>Commons-pool.jar：连接池实现的依赖库<br>Maven可搜索坐标<code>commons-dbcp</code><br>DBCP连接池使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据库连接池对象</span></span><br><span class="line">BasicDataSource dataSource=<span class="keyword">new</span> BasicDataSource();</span><br><span class="line"><span class="comment">//为连接池注册驱动(MySQL新版本自动注册，可忽略)</span></span><br><span class="line">dataSource.setDriverClassName(driveClassName);</span><br><span class="line"><span class="comment">//设置数据库连接信息</span></span><br><span class="line">dataSource.setUrl(<span class="string">"jdbc:mysql://localhost:3306/db"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">"root"</span>);</span><br><span class="line">dataSource.setUrl(<span class="string">""</span>);</span><br><span class="line"><span class="comment">//设置初始连接数量</span></span><br><span class="line">ds.setInitialSize(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//设置最大链接数量</span></span><br><span class="line">ds.setMaxActive(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//连接连接池对象</span></span><br><span class="line">Connection conn=ds.getConnection();</span><br></pre></td></tr></table></figure><h3 id="C3P0连接池"><a href="#C3P0连接池" class="headerlink" title="C3P0连接池"></a>C3P0连接池</h3><p>导入C3P0连接池jar包<br>c3p0-0.9.1.2.jar<br>C3P0连接池使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建数据库连接池</span></span><br><span class="line">ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line"><span class="comment">//两种方式指定c3p0连接池的配置：</span></span><br><span class="line"><span class="comment">//1.手动赋值(不推荐) 2.配置src根目录下`c3p0-config.xml`文件</span></span><br><span class="line"><span class="comment">//c3p0自动读取src目录下的配置文件无需操作</span></span><br><span class="line"><span class="comment">//手动赋值操作演示(不推荐)</span></span><br><span class="line">cpds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">cpds.setJdbcUrl(<span class="string">"jdbc:mysql:///database"</span>);</span><br><span class="line">cpds.setUser(<span class="string">"root"</span>);</span><br><span class="line">cpds.setPassword(<span class="string">"root"</span>);</span><br><span class="line"><span class="comment">//手动赋值演示完毕</span></span><br><span class="line">Connection conn=cpds.getConnection();</span><br></pre></td></tr></table></figure><p>关于c3p0-config.xml文件配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">default-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span></span><br><span class="line">com.mysql.jdbc.Driver</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span></span><br><span class="line">jdbc:mysql:///database</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">root</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">root</span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">default-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DAO数据访问对象"><a href="#DAO数据访问对象" class="headerlink" title="DAO数据访问对象"></a>DAO数据访问对象</h2><h3 id="DAO介绍"><a href="#DAO介绍" class="headerlink" title="DAO介绍"></a>DAO介绍</h3><ul><li>DAO(Data Access Object)数据访问对象</li><li>建立在数据库和业务层之间，封装所有对数据库的访问</li><li>目的：数据访问逻辑和业务逻辑分开</li><li>建立一个接口(DAO)，接口中定义了程序中会用到的所有事务的方法</li><li>建立接口的实现类，实现接口对应的方法，和数据库直接交互</li><li>在应用程序中，当需要和数据源交互时则使用DAO接口，不涉及任何数据库的具体操作</li></ul><h3 id="DAO封装对数据的访问"><a href="#DAO封装对数据的访问" class="headerlink" title="DAO封装对数据的访问"></a>DAO封装对数据的访问</h3><ul><li>构成通常包括：一个DAO工厂类、一个DAO接口、一个实现DAO接口的具体类、数据传递对象(实体对象或值对象)</li><li>DAO层需要定义对数据库中表的访问</li><li>对象关系映射：表和类对应、表中的字段和类属性对应、记录和对象对应</li></ul><h2 id="JDBC实现事务处理"><a href="#JDBC实现事务处理" class="headerlink" title="JDBC实现事务处理"></a>JDBC实现事务处理</h2><h3 id="JDBC事务语句"><a href="#JDBC事务语句" class="headerlink" title="JDBC事务语句"></a>JDBC事务语句</h3><ul><li>获取当前事务的提交方式：<code>Connection.getAutoCommit()</code>，默认为true</li><li>设置事务的提交属性：<code>Connection.setAutoCommit(boolean)</code>，true自动自交，false取消自动提交</li><li>提交事务：<code>Connection.commit()</code></li><li>回滚事务：<code>Connection.rollback()</code>，一般放在catch中，当遇到错误回滚</li></ul><h3 id="JDBC事务实现"><a href="#JDBC事务实现" class="headerlink" title="JDBC事务实现"></a>JDBC事务实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    conn = DriverManager.getConnection(<span class="string">"."</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="keyword">boolean</span> autoCommit = conn.getAutoCommit();<span class="comment">//获取自动提交状态</span></span><br><span class="line">    conn.setAutoCommit(<span class="keyword">false</span>);<span class="comment">//设定自动提交</span></span><br><span class="line">    <span class="comment">//...执行SQL语句</span></span><br><span class="line">    conn.commit();<span class="comment">//提交事务</span></span><br><span class="line">    conn.setAutoCommit(autoCommit);<span class="comment">//还原自动提交状态</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (conn == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.rollback();<span class="comment">//当发生错误，回滚事务</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3><p>JDBC中通过Connection提供的方法设置事务隔离级别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Connection. setTransactionIsolation(<span class="keyword">int</span> level)</span><br><span class="line"><span class="comment">//可选参数</span></span><br><span class="line">Connection.TRANSACTION_READ_UNCOMMITTED<span class="comment">//1（读未提交数据）</span></span><br><span class="line">Connection.TRANSACTION_READ_COMMITTED<span class="comment">//2（读已提交数据）</span></span><br><span class="line">Connection.TRANSACTION_REPEATABLE_READ<span class="comment">//4（可重复读）</span></span><br><span class="line">Connection.TRANSACTION_SERIALIZABLE<span class="comment">//8（串行化）</span></span><br><span class="line">Connection.TRANSACTION_NONE<span class="comment">//0（不使用事务）</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java数据库-JDBC&quot;&gt;&lt;a href=&quot;#Java数据库-JDBC&quot; class=&quot;headerlink&quot; title=&quot;Java数据库-JDBC&quot;&gt;&lt;/a&gt;Java数据库-JDBC&lt;/h1&gt;&lt;h2 id=&quot;JDBC简介&quot;&gt;&lt;a href=&quot;#JDBC简介&quot;
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>HashMap和HashSet的区别</title>
    <link href="http://yoursite.com/2019/12/11/HashMap%E5%92%8CHashSet%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/12/11/HashMap%E5%92%8CHashSet%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2019-12-11T11:48:04.000Z</published>
    <updated>2019-12-13T02:55:35.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HashMap和HashSet的区别"><a href="#HashMap和HashSet的区别" class="headerlink" title="HashMap和HashSet的区别"></a>HashMap和HashSet的区别</h2><ul><li><code>HashMap</code>和<code>HashSet</code>的区别是Java面试中最常被问到的问题。而Collection框架的问题不涉及到HashSet和HashMap，也可以说是不完整。HashMap和HashSet都是collection框架的一部分，它们让我们能够使用对象的集合。collection框架有自己的接口和实现，主要分为Set接口，List接口和Queue接口。它们有各自的特点，Set的集合里不允许对象有重复的值，List允许有重复，它对集合中的对象进行索引，Queue的工作原理是FCFS算法(First Come, First Serve)。<h5 id="什么是HashSet"><a href="#什么是HashSet" class="headerlink" title="什么是HashSet"></a>什么是HashSet</h5></li><li>HashSet实现了Set接口，它不允许集合中有重复的值，当我们提到HashSet时，第一件事情就是在将对象存储在HashSet之前，要先确保对象重写equals()和hashCode()方法，这样才能比较对象的值是否相等，以确保set中没有储存相等的对象。如果我们没有重写这两个方法，将会使用这个方法的默认实现。  </li><li>public boolean add(Object o)方法用来在Set中添加元素，当元素值重复时则会立即返回false，如果成功添加的话会返回true。   　　<h5 id="什么是HashMap"><a href="#什么是HashMap" class="headerlink" title="什么是HashMap"></a>什么是HashMap</h5></li></ul><ul><li>HashMap实现了Map接口，Map接口对键值对进行映射。Map中不允许重复的键。Map接口有两个基本的实现，HashMap和TreeMap。TreeMap保存了对象的排列次序，而HashMap则不能。HashMap允许键和值为null。HashMap是非synchronized的，但collection框架提供方法能保证HashMap synchronized，这样多个线程同时访问HashMap时，能保证只有一个线程更改Map。</li><li>public Object put(Object Key,Object value)方法用来将元素添加到map中。  </li></ul><h5 id="HashSet和HashMap的区别"><a href="#HashSet和HashMap的区别" class="headerlink" title="HashSet和HashMap的区别"></a>HashSet和HashMap的区别</h5><table><thead><tr><th><strong>HashMap</strong></th><th><strong>HashSet</strong></th></tr></thead><tbody><tr><td>HashMap实现了Map接口</td><td>HashSet实现了Set接口</td></tr><tr><td>HashMap储存键值对</td><td>HashSet仅仅存储对象</td></tr><tr><td>使用put()方法将元素放入map中</td><td>使用add()方法将元素放入set中</td></tr><tr><td>HashMap中使用键对象来计算hashcode值</td><td>HashSet使用成员对象来计算hashcode值，对于两个对象来说hashcode可能相同，所以equals()方法用来判断对象的相等性，如果两个对象不同的话，那么返回false</td></tr><tr><td>HashMap比较快</td><td>因为是使用唯一的键来获取对象     HashSet较HashMap来说比较慢</td></tr></tbody></table><p><strong>转载：</strong><a href="https://www.cnblogs.com/zhuyeshen/p/10981194.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuyeshen/p/10981194.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HashMap和HashSet的区别&quot;&gt;&lt;a href=&quot;#HashMap和HashSet的区别&quot; class=&quot;headerlink&quot; title=&quot;HashMap和HashSet的区别&quot;&gt;&lt;/a&gt;HashMap和HashSet的区别&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="Java集合" scheme="http://yoursite.com/categories/Java%E9%9B%86%E5%90%88/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据库-MySQL笔记</title>
    <link href="http://yoursite.com/2019/12/10/SQL-MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/10/SQL-MySQL%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-10T12:08:47.000Z</published>
    <updated>2019-12-26T06:03:31.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库-MySQL笔记"><a href="#数据库-MySQL笔记" class="headerlink" title="数据库-MySQL笔记"></a>数据库-MySQL笔记</h1><h2 id="数据库简介"><a href="#数据库简介" class="headerlink" title="数据库简介"></a>数据库简介</h2><h3 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h3><ul><li>关系：描述两个元素间的关联或对应关系</li><li>使用关系模型把数据组织到二维数据表(Table)中的数据库</li><li>简单理解：以二维表的形式保存数据的数据库就是关系型数据库</li><li>数据库产品：Oracle、BD2、Sybase、SQL Server、MySQL</li></ul><h3 id="主流关系型数据库"><a href="#主流关系型数据库" class="headerlink" title="主流关系型数据库"></a>主流关系型数据库</h3><ul><li>MySQL：Oracle公司产品，08年被Sun公司收购，09年Sun公司被Oracle收购，开源产品</li><li>MariaDB：原MySQL团队从Oracle离职创建MariaDB，所以现在而言MariaDB与MySQL操作相似</li><li>Oracle：Oracle公司产品，闭源产品，性能最好，价格最贵</li><li>SQLServer：微软公司产品，闭源产品，具有微软的整套解决方案</li><li>DB2：IBM公司产品，闭源产品，具有IBM的整套解决方案</li><li>SQLite：轻量级数据库</li></ul><h4 id="开源与闭源"><a href="#开源与闭源" class="headerlink" title="开源与闭源"></a>开源与闭源</h4><ul><li>开源：开放源代码，盈利方式：靠卖服务</li><li>闭源：不开放源代码，盈利方式：靠卖产品+卖服务</li></ul><h3 id="数据库的使用"><a href="#数据库的使用" class="headerlink" title="数据库的使用"></a>数据库的使用</h3><ul><li>数据库：通常情况下，一个网站或系统中的所有数据，会存储在一个数据库中</li><li>表：一个数据库中可以创建多张表，通常一类数据会存放在一张表中<ul><li>数据表往往保存一类数据，对应java中的一个类</li></ul></li><li>表记录：一张表中可以包含多行表记录，每一行表记录用于描述一个具体的数据<ul><li>一条表记录往往对应java中的一个具体的实例</li></ul></li><li>表中具有几个概念：列、行、主键</li><li>字段都有:字段名称/字段数据类型/字段约束/字段长度</li></ul><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="MySQL安装过程"><a href="#MySQL安装过程" class="headerlink" title="MySQL安装过程"></a>MySQL安装过程</h3><ul><li>常见的：MySQL直接安装版、MySQL免安装版</li><li>本次笔记主要以5版本为主，8版本安装时，会自动生成密码，一定以及保存</li><li>直装版直接安装即可：<ol><li>安装路径不可以有中文</li><li>端口号默认3306最好更改防止木马攻击</li><li>语言选择全球UTF-8</li><li>ROOT用户的密码设置（是否可以远程控制）</li><li>配置环境变量，也可手动，path添加MySQL/bin的目录</li></ol></li><li>免安装版安装步骤：<ol><li>配置环境变量，path添加MySQL/bin的目录</li><li><strong>安装</strong>/卸载MySQL服务：<code>mysqld install</code> 和 <code>mysqld remove</code></li><li><strong>启动</strong>/停止MYSQL服务：<code>net start mysql</code> 和 <code>net stop mysql</code></li><li>连接数据库：<code>mysql -uroot -p密码，或者-p回车，输入*密码</code>，默认无密码</li><li>输入命令查看是否存在支持数据库：<code>show databases;</code></li></ol></li></ul><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><h3 id="SQL语言介绍"><a href="#SQL语言介绍" class="headerlink" title="SQL语言介绍"></a>SQL语言介绍</h3><ul><li>SQL(Structured Query Language):结构化查询语言</li><li>SQL是在关系数据库上执行数据操作、检索及维护所使用的标准语言，可以用来查询数据，操作数据，定义数据，控制数据</li><li>所有数据库都使用相同或相似的语言</li></ul><h3 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h3><ul><li>数据查询语言(DQL-Data Query Language)  相对于表的数据的查<ul><li>用于查询表格内数据的指令</li><li>代表关键字:<code>select</code></li><li><code>executeQuery(sql)</code>[ 此方法用于执行查询的SQL]</li></ul></li><li>数据操纵语言(DML-Data Manipulation Language)    相对于表的数据的增删改<ul><li>负责对数据库中更改数据操作的指令</li><li>代表关键字:<code>insert</code>,<code>delete</code>,<code>update</code></li><li><code>executeUpdate(sql)</code>[此方法用于执行增删改的SQL语句]</li><li>注意：DML支持事务DML语句操作以后可以利用<strong>rollback</strong>回滚操作</li></ul></li><li>数据定义语言(DDL-Data Definition Language)    相对于表的增删改<ul><li>负责数据定义与创建数据库对象的语言</li><li>代表关键字:<code>create</code> ,<code>drop</code>,<code>alter</code>，<code>TRUNCATE</code>（删除表数据，保留表结构）  </li><li><code>execute(sql)</code>[此方法也可以执行任何SQL语句]</li><li>注意：DDL不支持事务DDL语句操作以后<strong>无法回滚</strong>(rollback)</li></ul></li><li>事务控制语言(TCL-Transactional Control Language)<ul><li>负责实现数据库中事务支持的语言</li><li>代表关键字:<code>commit</code>(提交，确认已经进行的数据改变) ,<code>rollback</code>（回滚，取消已经进行的数据改变） ,<code>savepoint</code>（保存点，使当前的事务可以回退到指定的保存点，便于取消部分改变）</li></ul></li><li>数据控制语言(DCL-Data Control Language)<ul><li>用于管理数据库授权，角色控制等</li><li>代表关键字:<code>grant</code>(授予，用于给用户或角色授予权限),<code>revoke</code>(用于收回用户或角色已有的权限),<code>CREATE USER</code>(创建用户)等    </li></ul></li><li>SQL中<code>truncate</code> 、<code>delete</code>与<code>drop</code>区别(Rollback Segment）<ul><li><b>相同点：</b></li></ul>1.truncate和不带where子句的delete、以及drop都会删除表内的数据。<br>2.drop、truncate都是DDL语句(数据定义语言),执行后会自动提交。<ul><li><b>不同点：</b></li></ul></li></ul><p>1.truncate 和 delete 只删除数据不删除表的结构(定义)<br>drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index)；依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。<br>2.delete 语句是数据库操作语言(DML)，这个操作会放到 rollback segement 中，事务提交之后才生效；如果有相应的 trigger，执行的时候将被触发。<br>truncate、drop 是数据库定义语言(DDL)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。<br>3.delete 语句不影响表所占用的extent，高水线(highwatermark)保持原位置不动 drop语句将表所占用的空间全部释放。truncate 语句缺省情况下见空间释放到minextents个 extent，除非使用reuse storage；truncate会将高水线复位(回到最开始)。<br>4.速度，一般来说: drop&gt; truncate &gt; delete<br>5.安全性：小心使用 drop 和 truncate，尤其没有备份的时候.使用上,想删除部分数据行用 delete，注意带上where子句. 回滚段要足够大.想删除表,当然用 drop想保留表而将所有数据删除，如果和事务无关，用truncate即可。如果和事务有关,或者想触发trigger,还是用delete。如果是整理表内部的碎片，可以用truncate跟上reuse stroage，再重新导入/插入数据。<br>6.delete是DML语句,不会自动提交。drop/truncate都是DDL语句,执行后会自动提交。<br>7、TRUNCATE TABLE在功能上与不带WHERE子句的 DELETE语句相同：二者均删除表中的全部行。但TRUNCATE TABLE比  DELETE 速度快，且使用的系统和事务日志资源少。DELETE   语句每次删除一行，并在事务日志中为所删除的每行记录一项。TRUNCATE TABLE通过释放存储表数据所用的数据页来删除数据，并且只在事务日志中记录页的释放。<br>8、TRUNCATE TABLE删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用   DELETE。如果要删除表定义及其数据，请使用 DROP TABLE语句。<br> 9、对于由FOREIGN  KEY约束引用的表，不能使用TRUNCATE TABLE，而应使用不带 WHERE子句的 DELET语句。由TRUNCATE TABLE不记录在日志中，所以它不能激活触发器。<br> 10、TRUNCATE TABLE不能用于参与了索引视图的表。  </p><ul><li><b>Rollback Segment</b><br>Rollback Segments是在你数据库中的一些存储空间，它用来临时的保存当数据库数据发生改变时的先前值，Rollback Segment主要有两个目的：<br>1.如果因为某种原因或者其他用用户想要通过ROLLBACK声明来取消一个人的数据操作，数据就会复原到之前为改变时的值。这种情况只在transaction的过程中有效，如果用户执行了COMMIT命令，那么ROLLBACK SEGMENT里面的值就会标识为失效的，数据改变就将永久化。</li></ul><p>2.另一个目的是当有并发的session访问了一个数据值改变但事务还没有提交的表。如果一个SELECT语句开始读取一个表同时一个事务也在修改这个表的值，那么修改前的值就会保存到rollback segment里面，SELECT语句也是从ROLLBACK SEGMENT里面读取表的值。<br>      转载：<a href="https://blog.csdn.net/sinat_34093604/article/details/59485413" target="_blank" rel="noopener">https://blog.csdn.net/sinat_34093604/article/details/59485413</a>   </p><h3 id="SQL常用命令"><a href="#SQL常用命令" class="headerlink" title="SQL常用命令"></a>SQL常用命令</h3><table><thead><tr><th>操作</th><th>命令</th></tr></thead><tbody><tr><td>创建数据库</td><td>create database 数据库名称;</td></tr><tr><td>选择数据库</td><td>use 数据库名称;</td></tr><tr><td>删除数据库</td><td>drop database 数据库名称;</td></tr><tr><td>导入数据</td><td>source 数据文件;</td></tr><tr><td>-</td><td>-</td></tr><tr><td>查询当前使用的数据库</td><td>select database();</td></tr><tr><td>查询数据库版本</td><td>select version();</td></tr><tr><td>查看现有的数据库</td><td>show databases;</td></tr><tr><td>查看当前数据库现有的表</td><td>show tables;</td></tr><tr><td>查看其他数据库现有的表</td><td><code>show tables from &lt;databasename&gt;;</code></td></tr><tr><td>查看表的结构</td><td><code>desc &lt;tablename&gt;;</code></td></tr><tr><td>看表的创建语句</td><td><code>show create table &lt;table name&gt;;</code></td></tr></tbody></table><h2 id="MySQL基本知识"><a href="#MySQL基本知识" class="headerlink" title="MySQL基本知识"></a>MySQL基本知识</h2><h3 id="MySQL基础"><a href="#MySQL基础" class="headerlink" title="MySQL基础"></a>MySQL基础</h3><ul><li>更改编码：mysql&gt; set names gbk/utf8;</li><li>备份数据库：cmd&gt; mysqldump -uXX -pXX databasename &gt; 文件名.sql</li><li>恢复数据库：cmd&gt; mysql -uXX -pXX databasename &lt; 文件名.sql<ul><li>或者直接：mysql&gt; source 文件名.sql</li></ul></li><li>注释符号：<code>--</code> 和 <code>#</code></li></ul><h3 id="MySQL数据类型"><a href="#MySQL数据类型" class="headerlink" title="MySQL数据类型"></a>MySQL数据类型</h3><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>char(字符数)</td><td>定长字符串，最长255个字符，存储空间大小固定，不足空格补充<br>适合作为主键或外键</td></tr><tr><td>varchar(字符数)</td><td>变长字符串，最长不超过 65535个字节<br>存储空间等于实际数据空间，一般超过255个字节，会使用text类型</td></tr><tr><td>text</td><td>大文本（长文本）类型，文本长度超过255个字符，就会使用text类型存储</td></tr><tr><td>bigtext</td><td>大大文本类型，文本超过25535个字符，使用bigtext，长度最多4GB</td></tr><tr><td>tinyint(长度)</td><td>整数，占用1字节</td></tr><tr><td>smallint(长度)</td><td>整数，占用2字节</td></tr><tr><td>int(长度)</td><td>整数，占用4字节，主要配合填0属性，int(5):1 = 00001</td></tr><tr><td>bigint(长度)</td><td>整数，占用8字节</td></tr><tr><td>float(有效数字位数，小数位)</td><td>数值型，4字节单精度浮点类型</td></tr><tr><td>double(有效数字位数，小数位)</td><td>数值型，8字节双精度浮点类型</td></tr><tr><td>date</td><td>日期型:只能保存年月日</td></tr><tr><td>time</td><td>日期型:只能保存時分秒</td></tr><tr><td>datetime</td><td>默认值为null、最大值:9999-12-31<br>、可存年月日、時分秒</td></tr><tr><td>timestamp</td><td>时间戳(实际存储的是一个时间毫秒值)，与datetime存储日期格式相同<br>timestamp最大表示2038年，而datetime范围是1000~9999<br>timestamp在插入数、修改数据时，可以自动更新成系统当前时间</td></tr><tr><td>BLOB</td><td>Binary Large OBject（二进制大对象）图片声音视频，用IO函数</td></tr><tr><td>CLOB</td><td>Character Large OBject（字符大对象）4GB+的字符串</td></tr><tr><td>其它……</td><td></td></tr></tbody></table><h3 id="字段-列-约束"><a href="#字段-列-约束" class="headerlink" title="字段(列)约束"></a>字段(列)约束</h3><ul><li>创建表时, 除了要给每个列指定对应的数据类型, 有时也需要给列添加约束</li><li>常见的约束有：主键约束、唯一约束、非空约束、外键约束</li></ul><h4 id="主键-primary-key"><a href="#主键-primary-key" class="headerlink" title="主键(primary key)"></a>主键(primary key)</h4><ul><li>主键是数据表中，一行记录的唯一标识</li><li>特点：唯一且不能为空</li><li>当主键为数值时，为了方便维护，可以设置主键为自增:<br><code>auto_increment</code></li><li>从历史最大值+1，只增不减，自增设置为0：<br><code>truncate table tablename;</code></li><li>删除主键:<br><code>alter table tablename drop priaty key;</code></li></ul><h4 id="唯一-unique"><a href="#唯一-unique" class="headerlink" title="唯一(unique)"></a>唯一(unique)</h4><ul><li>保证所约束的列必须是唯一的</li><li>特点：必须是唯一的，不可重复(允许为空)</li></ul><h4 id="非空-not-null"><a href="#非空-not-null" class="headerlink" title="非空(not null)"></a>非空(not null)</h4><ul><li>保证所约束的列必须是不为空的</li><li>特点：不能为空值， 即插入数据时该列必须得有值</li></ul><h4 id="外键约束（foreign-key）"><a href="#外键约束（foreign-key）" class="headerlink" title="外键约束（foreign key）"></a>外键约束（foreign key）</h4><ul><li>保证来自父表的某列数据，可以为NULL，语法必须表级 <code>foreign key (xxx) references 表名(字段名);</code></li><li>外键的级联更新与级联删除：父表更新删除，子表会跟随 <br><code>on update cascade;</code> 或 <code>on delete cascade;</code></li></ul><h4 id="自定义检查约束"><a href="#自定义检查约束" class="headerlink" title="自定义检查约束"></a>自定义检查约束</h4><ul><li>check（不建议使用）(在mysql中现在还不支持)</li></ul><h3 id="约束的使用"><a href="#约束的使用" class="headerlink" title="约束的使用"></a>约束的使用</h3><h4 id="删除约束："><a href="#删除约束：" class="headerlink" title="删除约束："></a>删除约束：</h4><ul><li>删除外键约束：<code>ALTER TABLE 表名 DROP foreign key 外键（区分大小写）;</code></li><li>删除主键约束：<code>ALTER TABLE 表名 DROP primary key;</code></li><li>删除约束约束：<code>ALTER TABLE 表名 DROP key 约束名称 ;</code></li></ul><h4 id="添加约束："><a href="#添加约束：" class="headerlink" title="添加约束："></a>添加约束：</h4><ul><li>添加外键约束：<code>ALTER TABLE 子表 ADD CONSTRAINT 约束名称 foreign key 子表(外键) references 父表(字段);</code></li><li>添加主键约束：<code>ALTER TABLE 表 ADD CONSTRAINT 约束名称 primary key 表(主键);</code></li><li>添加唯一约束：<code>ALTER TABLE 表 ADD CONSTRAINT 约束名称 unique 表(字段);</code></li></ul><h2 id="MySQL-DDL数据定义"><a href="#MySQL-DDL数据定义" class="headerlink" title="MySQL-DDL数据定义"></a>MySQL-DDL数据定义</h2><h3 id="数据库相关操作"><a href="#数据库相关操作" class="headerlink" title="数据库相关操作"></a>数据库相关操作</h3><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><ul><li><code>CREATE DATABASE [IF NOT EXISTS] dbname [create_specification..] [DEFAULT] CHARSET/CHARACTER SET charsetname [COLLEATE collationname];</code></li><li>示例：<code>create database db01 character set utf8 collate utf8_bin;</code></li><li>解释：创建一个使用utf8字符集，并带校对规则的db01数据库</li></ul><h4 id="查看、删除数据库"><a href="#查看、删除数据库" class="headerlink" title="查看、删除数据库"></a>查看、删除数据库</h4><ul><li>显示数据库语句： <code>SHOW DATABASES;</code></li><li>显示数据库创建语句： <code>SHOW CREATE DATABASE dbname;</code></li><li>数据库删除语句： <code>DROP DATABASE [IF EXISTS] dbname</code></li></ul><h4 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h4><ul><li><code>ALERT DATABASE [IF NOT EXISTS] dbname [create_specification..] [DEFAULT] CHARSET/CHARACTER SET charsetname [COLLEATE collationname];</code></li><li>示例：<code>alert database db01 character set utf8;</code></li><li>解释：修改数据库db01的字符集为utf8</li></ul><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><ul><li>选择数据库：<code>use dbname;</code></li></ul><h3 id="表相关操作"><a href="#表相关操作" class="headerlink" title="表相关操作"></a>表相关操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><ul><li><code>CREATE TABLE tablename(field1 datatype （列约束）,...)[表约束][character set = utf8][collate 校对规则];</code></li><li>创建表时，指定的DEFAULT是指，存储数据时，若有Null，则存储DEFAULT指定字符</li><li>复制表：CREAT TABLE newtablename AS select 字段信息 from oldtablename;将查询结果作为新的表创建一个表</li></ul><h4 id="查看、删除表"><a href="#查看、删除表" class="headerlink" title="查看、删除表"></a>查看、删除表</h4><ul><li>显示表语句： <code>SHOW TABLES;</code></li><li>显示表创建语句： <code>SHOW CREATE TABLE tablename;</code></li><li>显示表字段信息： <code>DESC tablename;</code></li><li>数据库删除语句： <code>DROP TABLE [IF EXISTS] tablename</code></li></ul><h4 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h4><ul><li>追加字段(列)语句：<code>ALTER TABLE tablename ADD columnname datatype [DEFAULTexpr] [, column datatype]..;</code><ul><li>可选追加位置：最后添加信息 first 追加到第一行，after columnname 追加到指定列后面</li></ul></li><li>修改字段(列)语句：<code>ALTER TABLE tablename MODIFY columnname datatype [DEFAULTexpr] [, column datatype]...;</code></li><li>删除字段(列)语句：<code>ALTER TABLE tablename DROP columnname;</code></li><li>修改表名称：<code>RENAME TABLE 表名 to 新表名;</code></li><li>修改字段(列)名称：<code>ALTER TABLE tablename CHANGE oldcolumn newcolumn typefiled;</code></li><li>修改字段(列)类型约束：<code>ALTER TABLE xx MODIFY columnName dataType(length) [约束];</code></li><li>修改表字符集：<code>ALTER TABLE tablename CHARACTER SET utf8;</code></li></ul><h2 id="MySQL-DML数据操作"><a href="#MySQL-DML数据操作" class="headerlink" title="MySQL-DML数据操作"></a>MySQL-DML数据操作</h2><h3 id="INSERT插入"><a href="#INSERT插入" class="headerlink" title="INSERT插入"></a>INSERT插入</h3><ul><li>INSERT–插入表记录：</li><li>语法：<code>INSERT INTO 表名[(列1,列2...) VALUES(值1, 值2...);</code></li><li>语法：<code>INSERT INTO 表名(列1,列2...) VALUES(值1, 值2...),[(值1, 值2),...];</code>可以批量插入，逗号分隔</li><li>在插入字符串和日期时, 字符串和日期要用单引号引起来</li><li>快速数据：INSERT INTO select xx from xx;    将查询结果作为数据插入到表中</li></ul><h3 id="UPDATE修改"><a href="#UPDATE修改" class="headerlink" title="UPDATE修改"></a>UPDATE修改</h3><ul><li>UPDATE–修改表记录：</li><li>语法：<code>UPDATE tablename SET 字段=值,[字段=值..] WHERE 条件&#39;;</code></li><li>若没有限制条件，会将表中所有记录全更新</li></ul><h3 id="DELETE删除"><a href="#DELETE删除" class="headerlink" title="DELETE删除"></a>DELETE删除</h3><ul><li>delete–删除表记录：</li><li>语法：<code>DELETE FROM tablename WHERE 条件;</code></li><li>若没有限制条件，会将表中所有记录全部删除</li><li>Delete语句不能删除某一列的值（可使用update）<code>UPDATE tablename SET 字段名=&#39;&#39;;</code></li><li>删除表中数据也可使用TRUNCATE TABLE 语句，它和delete有所不同</li></ul><h3 id="DROP、UPDATE、TRUNCATE区别"><a href="#DROP、UPDATE、TRUNCATE区别" class="headerlink" title="DROP、UPDATE、TRUNCATE区别"></a>DROP、UPDATE、TRUNCATE区别</h3><ul><li>drop是删除数据库和删除表时用的</li><li>delete和truncate是删除表记录时用的</li><li>delete删除表记录时,仅仅是删除表记录本身, 对表没有影响</li><li>truncate删除表记录时, 默认是将表摧毁再重建, 对表有影响(比如会重置AUTO_INCREMENT的值)</li></ul><h2 id="MySQL-DQL查询语句"><a href="#MySQL-DQL查询语句" class="headerlink" title="MySQL-DQL查询语句"></a>MySQL-DQL查询语句</h2><h3 id="SELECT查询"><a href="#SELECT查询" class="headerlink" title="SELECT查询"></a>SELECT查询</h3><ul><li><code>SELECT 字段[[as]显示名称],... FROM tablename [WHERE 条件];</code></li><li>多个字段用,隔开，中文用单引号，字段可以进行算术操作（不改变原数据）</li><li>用AS关键字更改字段的显示名称（AS可省略），*可查所有但不推荐</li><li>SELECT语句不会更改原数据库数据</li></ul><h3 id="WHERE子语句-运算符"><a href="#WHERE子语句-运算符" class="headerlink" title="WHERE子语句-运算符"></a>WHERE子语句-运算符</h3><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td><code>&gt; &lt; &lt;= &gt;= = &lt;&gt; !=</code></td><td>大于、小于、大于(小于)等于、不等于</td></tr><tr><td>between x and y</td><td>两个值之间,等同于 &gt;= and &lt;= ，注意含x和y</td></tr><tr><td>is null</td><td>为null（is not null 不为空），不可以用=null</td></tr><tr><td>and or not</td><td>并且、或者、取非，主要用在is 或in中</td></tr><tr><td>in(SET)</td><td>包含，相当于多个or（not in不在这个范围中）</td></tr><tr><td>like</td><td>like称为模糊查询，支持%或下划线匹配<hr>%匹配任意个字符，’%8%’  ‘_8%’  ‘%8_’<hr>下划线，一个下划线只匹配一个字符</td></tr></tbody></table><h3 id="WHERE子语句-数据处理函数-单行处理函数"><a href="#WHERE子语句-数据处理函数-单行处理函数" class="headerlink" title="WHERE子语句-数据处理函数/单行处理函数"></a>WHERE子语句-数据处理函数/单行处理函数</h3><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>Lower/upper</td><td>转换小写、转换大写</td></tr><tr><td>substr</td><td>取子串（substr(被截取的字符串,起始下标,截取的长度)）</td></tr><tr><td>length</td><td>取长度</td></tr><tr><td>trim</td><td>去空格 提交表单常用！！</td></tr><tr><td>str_to_date</td><td>将字符串转换成日期str_to_date (字符串，匹配格式)</td></tr><tr><td>date_format</td><td>格式化日期 now() 当前时间<br>%Y：代表4位的年份%y：代表2位的年份<br>%m：代表月,格式为(01……12)<br>%c：代表月,格式为(1……12)<br>%H：代表小时,格式(00……23)%h：代表小时,格式(01……12)<br>%i：代表分钟,格式为(00……59)<br>%r：代表时间,格式为12小时(hh:mm:ss[AP]M)<br>%T：代表时间,格式为24小时(hh:mm:ss)<br>%S：代表秒,格式为(00……59)<br>%s：代表秒,格式为(00……59)</td></tr><tr><td>format</td><td>设置千分位</td></tr><tr><td>round</td><td>四舍五入</td></tr><tr><td>rand()</td><td>生成随机数【0~1】</td></tr></tbody></table><ul><li>如果’2018-08-08’会自动转换为日期类型select date_format(now(),’%Y-%m-%d %H %i %s’);</li><li>一般我们直接把日期储存为字符串类型，因为兼容性差</li></ul><h3 id="WHERE子语句-其他函数"><a href="#WHERE子语句-其他函数" class="headerlink" title="WHERE子语句-其他函数"></a>WHERE子语句-其他函数</h3><table><thead><tr><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>ceil(数值)</td><td>向上取整</td></tr><tr><td>floor(数值)</td><td>向下取整</td></tr><tr><td>round(数值)</td><td>向下取整</td></tr><tr><td>rand(数值)</td><td>随机数</td></tr><tr><td>curdate()</td><td>返回当前日期(年月日)</td></tr><tr><td>curtime()</td><td>返回当前时间(时分秒)</td></tr><tr><td>now()</td><td>返回当前日期+时间(年月日 时分秒)</td></tr><tr><td>date_add()、date_sub()</td><td>增加/减少日期</td></tr><tr><td>year()、month()、day()<br>hour()、minute()、second()</td><td>分别用来获取日期中的数据</td></tr></tbody></table><h3 id="WHERE子语句-分组函数-聚合函数-多行处理函数"><a href="#WHERE子语句-分组函数-聚合函数-多行处理函数" class="headerlink" title="WHERE子语句-分组函数/聚合函数/多行处理函数"></a>WHERE子语句-分组函数/聚合函数/多行处理函数</h3><ul><li>count(列名) 取得记录数</li><li>sum(列名) 求和</li><li>avg(列名) 取平均</li><li>max(列名) 取最大的数</li><li>min(列名) 取最小的数</li><li>count中列名可以用*表示，进行列数的统计</li><li>忽略空值，不可以直接使用在where函数中</li></ul><h3 id="分组排序"><a href="#分组排序" class="headerlink" title="分组排序"></a>分组排序</h3><ul><li>语法<code>ORDER BY columnname ASC|DESC</code></li><li>Asc 升序（默认）、Desc 降序</li><li>多字段排序，可使用逗号隔开</li><li>columnname可以直接填写列号(n)，但不推荐  </li></ul><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><pre><code>select ename as \&apos;姓名&apos;\ from emp;select ename \&apos;姓名&apos;\ from emp;select ename 姓名 from emp;</code></pre><h3 id="去重与分组查询"><a href="#去重与分组查询" class="headerlink" title="去重与分组查询"></a>去重与分组查询</h3><ul><li>distinct去除重复<ul><li>select distinct 字段1[,…] from tablename; 去除这几个字段共同相同的</li><li>select count(distinct 字段) from tablename; 去重后进行统计</li></ul></li><li>分组查询：<ul><li>取得每个工作岗位的最高工资,除了谁外</li><li>select job, max(sal) from emp where job != ‘’ group by job;</li><li>select后的字段只能跟 分组函数+参与分组的字段（分组字段和计算条件字段）</li><li>where 不能直接跟分组函数，因为执行顺序：条件where  分组group by  选择select</li><li>所以where先过滤再分组，having可以在分组后再过滤数据</li></ul></li><li>示例：<ul><li>取得每个工作岗位的平均工资,平均工资1500以上的</li><li>select job, avg(sal) from emp where avg(sal) &gt;1500 group by job; 无效的，错误的</li><li>select job, avg(sal) from emp group by job having avg(sal) &gt;1500; 有效的</li><li>where分组前筛选，having分组后再筛选</li></ul></li><li><strong>where和having的区别</strong><ul><li>where先过滤再分组，having可以在分组后再过滤数据</li><li>where子句中不能使用列别名和聚合函数，having可以使用列别名和聚合函数</li></ul></li></ul><h3 id="查询语句DQL书写与执行顺序"><a href="#查询语句DQL书写与执行顺序" class="headerlink" title="查询语句DQL书写与执行顺序"></a>查询语句DQL书写与执行顺序</h3><ul><li>书写顺序：select 字段 from 表名 where ……. group by …….. having ……. order by …….. limit …;</li><li>执行顺序：from–where–group by–having–select–order by–limit</li></ul><h2 id="MySQL-DQL连接查询"><a href="#MySQL-DQL连接查询" class="headerlink" title="MySQL-DQL连接查询"></a>MySQL-DQL连接查询</h2><h3 id="SQL连接查询说明"><a href="#SQL连接查询说明" class="headerlink" title="SQL连接查询说明"></a>SQL连接查询说明</h3><ul><li>内连接(两表完全匹配的数据)：等值连接、非等值连接、自连接</li><li>外连接(两表完全匹配的数据+一表的未匹配数据(返回null))：左外连接、右外连接</li><li>全连接(量表的所有数据，匹配的不匹配的)，FULL JOIN【很少用】</li><li>交叉连接(左表每条与右表匹配，匹配成功重复保留)，[CROSS JOIN] 可以不写</li></ul><blockquote><p>一般连接查询的时候都给表NickName：<code>select e.ename,d.dname from emp e,dept d;</code></p></blockquote><h3 id="内连接等值连接"><a href="#内连接等值连接" class="headerlink" title="内连接等值连接"></a>内连接等值连接</h3><p>SQL92：select e.ename,d.dname from emp e,dept d where e.no = d.no [and 条件];<br>SQL99：<strong>select</strong> e.ename,d.dname <strong>from</strong> emp e [inner] <strong>join</strong> dept d <strong>on</strong> e.no =d.no [where 条件];<br>inner可以忽略不写，99语句将连接条件与where分离，筛选更清晰。</p><h3 id="内连接非等值连接"><a href="#内连接非等值连接" class="headerlink" title="内连接非等值连接"></a>内连接非等值连接</h3><p>SQL92：select e.ename,s.grade from emp e, salgrade s where e.sal between s.low and s.high;<br>SQL99：<strong>select</strong> e.ename,s.grade <strong>from</strong> emp e [inner] <strong>join</strong> salgrade s <strong>on</strong> e.sal between s.low and s.high; </p><h3 id="内连接自连接"><a href="#内连接自连接" class="headerlink" title="内连接自连接"></a>内连接自连接</h3><p>SQL92：select a.name,b.name from mgr a,mgr b where a.empno = b.mgr;<br>SQL99：<strong>select</strong> a.name,b.name <strong>from</strong> mgr a [inner] <strong>join</strong> mgr b <strong>on</strong> a.empno = b.mgr;<br>自连接就是一张表看做两张表</p><h3 id="外连接左连接"><a href="#外连接左连接" class="headerlink" title="外连接左连接"></a>外连接左连接</h3><p>SQL92：过时<br>SQL99：<strong>select</strong> e.name,d.name <strong>from</strong> emp e left[outer] <strong>join</strong> dept d <strong>on</strong> e.no = d.no;</p><h3 id="外连接右连接"><a href="#外连接右连接" class="headerlink" title="外连接右连接"></a>外连接右连接</h3><p>SQL92：过时<br>SQL99：<strong>select</strong> e.name,d.name <strong>from</strong> emp e right [outer] <strong>join</strong> dept d <strong>on</strong> e.no = d.no;</p><h3 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h3><ul><li>SQL99：<code>select a.name from a join b on xx join c on xx;</code></li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><ul><li>子语句常用()括起来，并且需要给子表起一个别名 <code>[AS] 别名</code></li><li>select里嵌套，了解，很少用</li><li>from里嵌套，查询结果当做临时表</li><li>where里嵌套，解决where里不能用分组函数</li></ul><h3 id="UNION联合语句"><a href="#UNION联合语句" class="headerlink" title="UNION联合语句"></a>UNION联合语句</h3><ul><li>两条语句之间用union连接，连接两张表</li><li>要求<strong>字段数量</strong>相同，<strong>字符类型</strong>相同</li></ul><h3 id="LIMIT查询"><a href="#LIMIT查询" class="headerlink" title="LIMIT查询"></a>LIMIT查询</h3><ul><li>用于限制显示查询结果数量</li><li>LIMIT [start,]length ，从第几条开始共几条，一个参数则为前几个</li><li>这是MySQL自己的关键字</li><li>可以用作分页查询数据：第pageNo页：(pageNo - 1) * pageSize, pageSize</li></ul><h2 id="MySQL-DQL连接查询-1"><a href="#MySQL-DQL连接查询-1" class="headerlink" title="MySQL-DQL连接查询"></a>MySQL-DQL连接查询</h2><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><ul><li>Java DataBase Connectivity: Java数据库连接, JDBC是Sun公司提供用于Java和数据连接的编程接口. <h3 id="如何使用JDBC"><a href="#如何使用JDBC" class="headerlink" title="如何使用JDBC"></a>如何使用JDBC</h3></li></ul><ol><li>创建maven工程</li><li>在pom.xml文件中添加以下代码  <pre><code>&lt;dependencies&gt;  &lt;dependency&gt;  &lt;groupId&gt;mysql&lt;/groupId&gt;  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;      &lt;version&gt;5.1.6&lt;/version&gt;  &lt;/dependency&gt;</code></pre></dependencies></li><li>创建Demo01 书写以下代码<pre><code>  //1. 注册驱动//Class.forName(&quot;com.mysql.jdbc.Driver&quot;);//2. 获取连接对象 //导包时选择java.sqlConnection conn =         DriverManager.getConnection(&quot;jdbc:mysql://localhost:3306/newdb3&quot;,        &quot;root&quot;, &quot;root&quot;);System.out.println(conn);//3. 创建SQL执行对象Statement s = conn.createStatement();//4. 执行SQLString sql =         &quot;create table jdbct1&quot;        + &quot;(id int,name varchar(10))&quot;;s.execute(sql);System.out.println(&quot;执行完成!&quot;);//5. 释放资源conn.close(); </code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据库-MySQL笔记&quot;&gt;&lt;a href=&quot;#数据库-MySQL笔记&quot; class=&quot;headerlink&quot; title=&quot;数据库-MySQL笔记&quot;&gt;&lt;/a&gt;数据库-MySQL笔记&lt;/h1&gt;&lt;h2 id=&quot;数据库简介&quot;&gt;&lt;a href=&quot;#数据库简介&quot; class
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据库</title>
    <link href="http://yoursite.com/2019/12/10/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://yoursite.com/2019/12/10/%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2019-12-10T09:01:05.516Z</published>
    <updated>2019-12-11T04:40:50.125Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模糊查询like"><a href="#模糊查询like" class="headerlink" title="模糊查询like"></a>模糊查询like</h3><ul><li>%:代表0或多个未知字符</li><li>_ ：代表1个未知字符</li><li>举例：   <pre><code>1.以x开头   x%  2.以x结尾   %x  3.包含x     %x%  4.第二个字符是x   _x%5.倒数第三个是x    %x_6.以x开头倒数第二个是y   x%y_</code></pre></li></ul><h3 id="排序-order-by"><a href="#排序-order-by" class="headerlink" title="排序 order by"></a>排序 order by</h3><ul><li>格式： order by 字段名 asc/desc(升序/降序)  </li><li>多字段排序 order by 字段名 asc/desc ,字段名 asc/desc</li></ul><h3 id="分页查询-limit"><a href="#分页查询-limit" class="headerlink" title="分页查询 limit"></a>分页查询 limit</h3><ul><li>格式： limit 跳过的条数，请求的条数(每页的条数）<br><code>select ename ,sal from emp order by sal desc limit 0,3;</code></li></ul><h3 id="数值计算"><a href="#数值计算" class="headerlink" title="数值计算 + - * /  %"></a>数值计算 + - * /  %</h3><ul><li>查询每一个员工的姓名，工资和年终奖（5个月的月工资）<br><code>select ename ,sal ,5*sal from emp;</code>    </li></ul><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>   <code>select ename as &#39;姓名&#39; from emp;</code><br>    <code>select ename &#39;姓名&#39; from emp;</code><br>    <code>select ename 姓名 from emp;</code></p><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><ul><li>对查询的多条数据进行统计  比如：平均值 最大值 最小值  求和  计数<br>1.平均值avg（字段名)<br><code>select avg(sal) from emp where deptno=1;</code><br>2.最大值max(字段名)<br><code>select max(sal) from emp where deptno=2;</code><br>3.最小min(字段名)<br><code>select min(sal) from  emp where job=&#39;销售&#39;；</code><br>4.求和sum(字段名)<br><code>select sum(sal) from emp where deptno=3;</code>   </li></ul><p>5.计数 count( * )</p><p>  <code>select count(*) from emp;</code> </p><h3 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h3><ul><li>以某一个字段相同值为一组 进行统计查询  group by</li></ul><p>1.查询每个部门的平均工资<br> <code>select deptno,avg(sal) from emp group by deptno;</code><br>2.查询每种工作的最低工资<br><code>select job , min(sal) from  emp group by job;</code></p><h3 id="having"><a href="#having" class="headerlink" title="having"></a>having</h3><ul><li>需要和group by结合使用</li><li>where后面只写普通字段的条件</li><li>having后面只写聚合函数的条件</li></ul><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><ul><li>创建表时 ，表与表之间存在的业务关系</li><li>有哪些关系？</li></ul><p>1.1对1：有AB两张表，A表中1条数据对应B表中1条，同时</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><ul><li>查询一张表的全部数据和另外一张表的交集数据</li><li>格式:<br><code>select 字段信息 from A left/right join B on 关联关系 where 条件</code></li></ul><h4 id="关联查询总结"><a href="#关联查询总结" class="headerlink" title="关联查询总结"></a>关联查询总结</h4><ul><li>三种查询方式：等值连接，内连接，外连接</li><li>如果需要查询两张表的交集数据使用等值连接和内连接（推荐）</li><li>如果查询一张表的全部和另外一张表的交集则使用外连接</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模糊查询like&quot;&gt;&lt;a href=&quot;#模糊查询like&quot; class=&quot;headerlink&quot; title=&quot;模糊查询like&quot;&gt;&lt;/a&gt;模糊查询like&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;%:代表0或多个未知字符&lt;/li&gt;
&lt;li&gt;_ ：代表1个未知字符&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Web练习-各种组件</title>
    <link href="http://yoursite.com/2019/12/10/Web%E7%BB%83%E4%B9%A0-%E5%90%84%E7%A7%8D%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/12/10/Web%E7%BB%83%E4%B9%A0-%E5%90%84%E7%A7%8D%E7%BB%84%E4%BB%B6/</id>
    <published>2019-12-10T08:38:19.000Z</published>
    <updated>2019-12-11T00:48:02.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web练习-各种组件"><a href="#Web练习-各种组件" class="headerlink" title="Web练习-各种组件"></a>Web练习-各种组件</h1><h2 id="table动态添加"><a href="#table动态添加" class="headerlink" title="table动态添加"></a>table动态添加</h2><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>定义一个table表格，顶部添加input，根据按钮动态添加内容</li><li>要求每行最后有个删除按钮，用于删除当行数据</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码："><a href="#HTML代码：" class="headerlink" title="HTML代码："></a>HTML代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"姓名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"年龄"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"工资"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"添加"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>员工列表<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>工资<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JQ代码："><a href="#JQ代码：" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过添加事件</span></span><br><span class="line">$(<span class="string">"input:last"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//定要要添加的元素</span></span><br><span class="line">    <span class="keyword">var</span> tr = $(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>);<span class="keyword">var</span> nametd= $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> agetd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>);<span class="keyword">var</span> saltd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> deltd = $(<span class="string">"&lt;td&gt;&lt;input type='button' value='删除'&gt;&lt;/td&gt;"</span>);  </span><br><span class="line">    <span class="comment">//定义好每个元素属性</span></span><br><span class="line">    deltd.children().click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        tr.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    nametd.text($(<span class="string">"input:eq(0)"</span>).val());</span><br><span class="line">    agetd.text($(<span class="string">"input:eq(1)"</span>).val());</span><br><span class="line">    saltd.text($(<span class="string">"input:eq(2)"</span>).val());</span><br><span class="line">    <span class="comment">//添加元素</span></span><br><span class="line">    tr.append(nametd);tr.append(agetd);</span><br><span class="line">    tr.append(saltd);tr.append(deltd);</span><br><span class="line">    $(<span class="string">"table"</span>).append(tr);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="select数据联动更新"><a href="#select数据联动更新" class="headerlink" title="select数据联动更新"></a>select数据联动更新</h2><h3 id="实现功能-1"><a href="#实现功能-1" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>两个选择框，定义省份跟市</li><li>点击对应的省份，会把对应的市添加到第二个选择框里</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码：-1"><a href="#HTML代码：-1" class="headerlink" title="HTML代码："></a>HTML代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"0"</span>&gt;</span>河北<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span>山东<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JQ代码：-1"><a href="#JQ代码：-1" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义数据</span></span><br><span class="line"><span class="keyword">var</span> arr = [[<span class="string">"唐山"</span>,<span class="string">"秦皇岛"</span>,<span class="string">"石家庄"</span>],</span><br><span class="line">    [<span class="string">"青岛"</span>,<span class="string">"济南"</span>,<span class="string">"潍坊"</span>],</span><br><span class="line">    [<span class="string">"大兴"</span>,<span class="string">"海淀"</span>,<span class="string">"朝阳"</span>]];</span><br><span class="line"><span class="comment">//根据点击，联动更新数据</span></span><br><span class="line">$(<span class="string">"select:first"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;        </span><br><span class="line">    $(<span class="string">"select:last"</span>).html(<span class="string">"&lt;option&gt;请选择&lt;/option&gt;"</span>);</span><br><span class="line">    <span class="keyword">var</span> x = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr[x].length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> op = $(<span class="string">"&lt;option&gt;&lt;/option&gt;"</span>);</span><br><span class="line">        op.text(arr[x][i]);</span><br><span class="line">        $(<span class="string">"select:last"</span>).append(op);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="无序列表展开折叠"><a href="#无序列表展开折叠" class="headerlink" title="无序列表展开折叠"></a>无序列表展开折叠</h2><h3 id="实现功能-2"><a href="#实现功能-2" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>无序列表实现类似好友分组的功能</li><li>细节要求：当打开其中一个分组时，其他分组关闭</li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码：-2"><a href="#HTML代码：-2" class="headerlink" title="HTML代码："></a>HTML代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;<span class="name">li</span>&gt;</span>亲戚<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>习大大<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>马大姐<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>老干妈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>同事<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>马云<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>马化腾<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>任正非<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>女友们<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>貂蝉<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>武则天<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>孙尚香<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JQ代码：-2"><a href="#JQ代码：-2" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li&gt;ul"</span>).hide();  <span class="comment">//先收起列表</span></span><br><span class="line">$(<span class="string">"body&gt;ul&gt;li"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).children().toggle(<span class="number">300</span>);  <span class="comment">//点击自己切换状态</span></span><br><span class="line">    $(<span class="keyword">this</span>).siblings().children().hide(<span class="number">300</span>);  <span class="comment">//其他元素关闭</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="checkbox勾选计算"><a href="#checkbox勾选计算" class="headerlink" title="checkbox勾选计算"></a>checkbox勾选计算</h2><h3 id="实现功能-3"><a href="#实现功能-3" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>有几个checkbox对应着金额数</li><li>根据勾选，随时计算金额总数</li><li>细节实现：全选、非全选状态的切换</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码：-3"><a href="#HTML代码：-3" class="headerlink" title="HTML代码："></a>HTML代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>订单列表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">value</span>=<span class="string">"20"</span>&gt;</span>鼠标20元<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"c2"</span> <span class="attr">value</span>=<span class="string">"80"</span>&gt;</span>鼠标80元<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"c3"</span> <span class="attr">value</span>=<span class="string">"2000"</span>&gt;</span>鼠标2000元<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"c4"</span> <span class="attr">value</span>=<span class="string">"1500"</span>&gt;</span>鼠标1500元<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"c5"</span>&gt;</span>全选<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>总价：0元<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="JQ代码：-3"><a href="#JQ代码：-3" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过一个点击事件完成整个效果</span></span><br><span class="line">$(<span class="string">"input"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.id == <span class="string">"c5"</span>) &#123;  <span class="comment">//通过this判断事件源，全选实现全选中</span></span><br><span class="line"><span class="keyword">var</span> status = $(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>);</span><br><span class="line">$(<span class="keyword">this</span>).siblings(<span class="string">"input"</span>).prop(<span class="string">"checked"</span>, status);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;  <span class="comment">//统计点击次数</span></span><br><span class="line"><span class="keyword">var</span> total = <span class="number">0</span>;  <span class="comment">//统计总价</span></span><br><span class="line">    <span class="comment">//方法进行价格统计</span></span><br><span class="line">$(<span class="string">"input:not(#c5)"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).prop(<span class="string">"checked"</span>)) &#123;</span><br><span class="line">total += <span class="built_in">parseInt</span>(<span class="keyword">this</span>.value);</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#c5"</span>).prop(<span class="string">"checked"</span>,count==<span class="number">4</span>);  <span class="comment">//实现动态全选</span></span><br><span class="line">$(<span class="string">"p"</span>).text(<span class="string">"总价："</span> + total + <span class="string">"元"</span>);  <span class="comment">//显示价格</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><h3 id="实现功能-4"><a href="#实现功能-4" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>四张图片实现轮播效果</li><li>细节：从右向左的轮播，每张图轮播完成停顿一下</li><li>细节：当鼠标移动到图片时，停止轮播</li><li>细节：当窗口失去焦点时，停止轮播</li></ul><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码：-4"><a href="#HTML代码：-4" class="headerlink" title="HTML代码："></a>HTML代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onmouseover</span>=<span class="string">"stop()"</span> <span class="attr">onmouseout</span>=<span class="string">"start()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"../imgs/a.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"../imgs/b.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"../imgs/c.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">src</span>=<span class="string">"../imgs/d.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS代码："><a href="#CSS代码：" class="headerlink" title="CSS代码："></a>CSS代码：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>,<span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>:<span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line"><span class="comment">/*为了做位置参考*/</span></span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line"><span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JQ代码：-4"><a href="#JQ代码：-4" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化图片位置</span></span><br><span class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"left"</span>,i*<span class="number">200</span>+<span class="string">"px"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> timer = setInterval(changeImg,<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//实现轮播方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeImg</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> id = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> oldLeft = <span class="built_in">parseInt</span>($(<span class="keyword">this</span>).css(<span class="string">"left"</span>));</span><br><span class="line">oldLeft-=<span class="number">4</span>;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"left"</span>,oldLeft+<span class="string">"px"</span>);</span><br><span class="line"><span class="keyword">if</span>(oldLeft&lt;=<span class="number">-200</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> newLeft=$(<span class="string">"img"</span>).length*<span class="number">200</span>+oldLeft;</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"left"</span>,newLeft+<span class="string">"px"</span>);</span><br><span class="line">clearInterval(id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实现开始停止轮播</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">clearInterval(timer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">stop();</span><br><span class="line">timer=setInterval(changeImg,<span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//设置窗口焦点事件</span></span><br><span class="line">onfocus=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">start();</span><br><span class="line">&#125;</span><br><span class="line">onblur=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动画实现下雪花"><a href="#动画实现下雪花" class="headerlink" title="动画实现下雪花"></a>动画实现下雪花</h2><h3 id="实现功能-5"><a href="#实现功能-5" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>黑色的背景，飘雪花</li><li>雪花大小随机20-40px</li><li>小雪花消落速度更快</li></ul><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><h4 id="CSS代码：-1"><a href="#CSS代码：-1" class="headerlink" title="CSS代码："></a>CSS代码：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    margin:0;  //清除body自带8px边框</span><br><span class="line">    background-color:#000;  //背景黑色</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JQ代码：-5"><a href="#JQ代码：-5" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置定时器</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> h = $(<span class="built_in">window</span>).height();</span><br><span class="line"><span class="keyword">var</span> w = $(<span class="built_in">window</span>).width();</span><br><span class="line"><span class="keyword">var</span> img = $(<span class="string">"&lt;img src='http://doc.tedu.cn/tts/tts/jsd1909/01-Teaching/05-Web/day08/snow.png'&gt;"</span>);</span><br><span class="line">$(<span class="string">"body"</span>).append(img);</span><br><span class="line"><span class="keyword">var</span> snowWidth = <span class="built_in">parseInt</span>(<span class="number">20</span>+<span class="built_in">Math</span>.random()*<span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> positionWidth = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*w-snowWidth);</span><br><span class="line">img.css(<span class="string">"left"</span>,positionWidth);</span><br><span class="line">img.css(<span class="string">"width"</span>,snowWidth+<span class="string">"px"</span>);</span><br><span class="line"><span class="keyword">var</span> speed = snowWidth*<span class="number">200</span>;</span><br><span class="line">    <span class="comment">//给img设定动画，下落以及消失</span></span><br><span class="line">img.animate(&#123;<span class="string">"top"</span>:h-snowWidth+<span class="string">"px"</span>&#125;,speed).fadeOut(<span class="number">1000</span>);</span><br><span class="line">&#125;,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="小游戏-综合练习"><a href="#小游戏-综合练习" class="headerlink" title="小游戏(综合练习)"></a>小游戏(综合练习)</h2><h3 id="实现功能-6"><a href="#实现功能-6" class="headerlink" title="实现功能"></a>实现功能</h3><ul><li>具有背景和4个敌人的图片，实现敌人从右向左入场</li><li>鼠标移入敌人img上，消灭敌人并积分，但敌人接近左侧一定位置，失败1次</li><li>细节：成绩每20分，敌人图片更新，且速度加快；失败分数20分，结束游戏</li></ul><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><h4 id="HTML代码：-5"><a href="#HTML代码：-5" class="headerlink" title="HTML代码："></a>HTML代码：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"s_h3"</span>&gt;</span>成功数量：0<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"f_h3"</span>&gt;</span>失败数量：0<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS代码：-2"><a href="#CSS代码：-2" class="headerlink" title="CSS代码："></a>CSS代码：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">body&#123;&lt;!-- 设定背景和适应图片相对定位 --&gt;</span><br><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url("bg1.jpg")</span>;</span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;&lt;!-- 设定图片大小和显示方式 --&gt;</span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>;</span><br><span class="line"><span class="selector-tag">width</span><span class="selector-pseudo">:60px</span>; </span><br><span class="line"><span class="selector-tag">height</span><span class="selector-pseudo">:60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JQ代码：-6"><a href="#JQ代码：-6" class="headerlink" title="JQ代码："></a>JQ代码：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//统计成功与失败</span></span><br><span class="line"><span class="keyword">var</span> sCount=<span class="number">0</span>;<span class="keyword">var</span> fCount=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//定义窗口宽高</span></span><br><span class="line"><span class="keyword">var</span> w = $(<span class="built_in">window</span>).width();<span class="keyword">var</span> h = $(<span class="built_in">window</span>).height();</span><br><span class="line"><span class="comment">//设置窗口自适应</span></span><br><span class="line">$(<span class="string">"body"</span>).css(<span class="string">"background-size"</span>,w+<span class="string">"px "</span>+h+<span class="string">"px"</span>);</span><br><span class="line">onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">w = $(<span class="built_in">window</span>).width();</span><br><span class="line">h = $(<span class="built_in">window</span>).height();</span><br><span class="line">$(<span class="string">"body"</span>).css(<span class="string">"background-size"</span>,w+<span class="string">"px "</span>+h+<span class="string">"px"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义添加僵尸</span></span><br><span class="line"><span class="keyword">var</span> t1 =setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//设置僵尸图片，与成绩相关</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="built_in">parseInt</span>(sCount/<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(type&gt;<span class="number">3</span>)&#123;</span><br><span class="line">type=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> img=$(<span class="string">"&lt;img src='zomb"</span>+type+<span class="string">".png'&gt;"</span>);</span><br><span class="line"><span class="comment">//添加图片，并设定位置</span></span><br><span class="line">$(<span class="string">"body"</span>).append(img);</span><br><span class="line"><span class="keyword">var</span> top = <span class="built_in">parseInt</span>(<span class="built_in">Math</span>.random()*(h<span class="number">-60</span>));</span><br><span class="line">img.css(&#123;</span><br><span class="line"><span class="string">"top"</span>:top+<span class="string">"px"</span>,<span class="string">"left"</span>:w+<span class="string">"px"</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//僵尸设定事件，鼠标移入打死僵尸</span></span><br><span class="line">img.mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">img.remove();</span><br><span class="line">sCount++;</span><br><span class="line">$(<span class="string">"h3:first"</span>).text(<span class="string">"成功数量："</span>+sCount);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,<span class="number">200</span>);</span><br><span class="line"><span class="comment">//定义僵尸移动</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"img"</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//移动速度与成功积分有关</span></span><br><span class="line"><span class="keyword">var</span> oldLeft = <span class="built_in">parseInt</span>($(<span class="keyword">this</span>).css(<span class="string">"left"</span>));</span><br><span class="line">oldLeft-= <span class="number">1</span>+<span class="built_in">parseInt</span>(sCount/<span class="number">20</span>);</span><br><span class="line">$(<span class="keyword">this</span>).css(<span class="string">"left"</span>, oldLeft+<span class="string">"px"</span>);</span><br><span class="line"><span class="comment">//判定失败</span></span><br><span class="line"><span class="keyword">if</span>(oldLeft&lt;=<span class="number">150</span>)&#123;</span><br><span class="line">$(<span class="keyword">this</span>).remove();</span><br><span class="line">fCount++;</span><br><span class="line">$(<span class="string">"h3:last"</span>).text(<span class="string">"失败数量："</span>+fCount);</span><br><span class="line"><span class="comment">//判定游戏结束</span></span><br><span class="line"><span class="keyword">if</span>(fCount&gt;=<span class="number">20</span>)&#123;</span><br><span class="line">alert(<span class="string">"游戏失败"</span>);</span><br><span class="line">clearInterval(t1);</span><br><span class="line">$(<span class="string">"img"</span>).remove();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web练习-各种组件&quot;&gt;&lt;a href=&quot;#Web练习-各种组件&quot; class=&quot;headerlink&quot; title=&quot;Web练习-各种组件&quot;&gt;&lt;/a&gt;Web练习-各种组件&lt;/h1&gt;&lt;h2 id=&quot;table动态添加&quot;&gt;&lt;a href=&quot;#table动态添加&quot; c
      
    
    </summary>
    
    
      <category term="项目练习" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
      <category term="JQ" scheme="http://yoursite.com/tags/JQ/"/>
    
  </entry>
  
  <entry>
    <title>Web基础-Bootstrap</title>
    <link href="http://yoursite.com/2019/12/10/Web%E5%9F%BA%E7%A1%80-Bootstrap/"/>
    <id>http://yoursite.com/2019/12/10/Web%E5%9F%BA%E7%A1%80-Bootstrap/</id>
    <published>2019-12-10T06:15:27.000Z</published>
    <updated>2019-12-11T00:42:02.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web基础-Bootstrap"><a href="#Web基础-Bootstrap" class="headerlink" title="Web基础-Bootstrap"></a>Web基础-Bootstrap</h1><h2 id="Bootstrap概述"><a href="#Bootstrap概述" class="headerlink" title="Bootstrap概述"></a>Bootstrap概述</h2><h3 id="什么是Bootstrap"><a href="#什么是Bootstrap" class="headerlink" title="什么是Bootstrap"></a>什么是Bootstrap</h3><ul><li>Bootstrap，来自 Twitter，是目前最受欢迎的前端框架</li><li>Bootstrap 是基于 HTML、CSS、JavaScript 的，它简洁灵活，使得 Web 开发更加快捷，采用了动态css技术<code>sass less</code></li><li>Bootstrap一旦引用，就修改了很多html默认样式，设置html元素的class属性就可以复用大量的CSS或jQuery代码</li><li>Bootstrap特别适合于不同大小设备显示网页的情况，可以根据显示屏大小相应出不同的页面布局</li><li>Bootstrap是基于jQuery开发的，所以支持大部分jQuery插件，有良好的扩展性</li></ul><h3 id="Bootstrap工作原理"><a href="#Bootstrap工作原理" class="headerlink" title="Bootstrap工作原理"></a>Bootstrap工作原理</h3><ul><li>Bootstrap其实就是一些CSS和jQuery代码的集合，引用它就是应用了其中已经编写好的CSS和jQuery代码</li><li>若设置class属性既使用了Bootstrap已经编写好的样式，所以减少了大量重复CSS代码的编写</li><li>若设置class属性，使得jQuery可以通过选择器选中，从而使Bootstrap中已经编写好的jQuery代码在该元素上生效</li></ul><h2 id="使用Bootstrap"><a href="#使用Bootstrap" class="headerlink" title="使用Bootstrap"></a>使用Bootstrap</h2><h3 id="引入Bootstrap"><a href="#引入Bootstrap" class="headerlink" title="引入Bootstrap"></a>引入Bootstrap</h3><ul><li>注意：Bootstrap是基于jQuery的，在引入Bootstrap的js之前，引入jQuery</li><li><a href="https://v3.bootcss.com/" target="_blank" rel="noopener">下载Bootstrap</a>，可以直接下载预编译压缩版本，或者直接使用CDN加速库</li><li>Bootstrap预编译文件(夹)结构：css(样式)、js、fonts(字体图标)</li><li>引入Bootstrap，本地或者网络</li><li>Bootstrap核心css文件：<code>/css/bootstrap.css</code></li><li>Bootstrap核心js文件：<code>/js/bootstrap.js</code></li><li>Bootstrap其他css文件：<code>/css/bootstrap-theme.css</code></li><li>国内推荐Staticfile CDN的库，CDN导入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">&lt;!-- jQuery文件。务必在bootstrap.min.js 之前引入 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="Bootstrap扩展使用"><a href="#Bootstrap扩展使用" class="headerlink" title="Bootstrap扩展使用"></a>Bootstrap扩展使用</h3><h4 id="视口-视觉窗口标签：mate"><a href="#视口-视觉窗口标签：mate" class="headerlink" title="视口/视觉窗口标签：mate"></a>视口/视觉窗口标签：mate</h4><ul><li>为了让 Bootstrap 开发的网站对移动设备友好，确保适当的绘制和触屏缩放，需要在网页的 head 之中添加 viewport meta 标签：</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></li><li>width 属性控制设备的宽度。假设您的网站将被带有不同屏幕分辨率的设备浏览，那么将它设置为 device-width 可以确保它能正确呈现在不同设备上</li><li>initial-scale=1.0 确保网页加载时，以 1:1 的比例呈现，不会有任何的缩放</li><li>在移动设备浏览器上，通过为 viewport meta 标签添加 user-scalable=no 可以禁用其缩放（zooming）功能</li><li>通常情况下，maximum-scale=1.0 与 user-scalable=no 一起使用。这样禁用缩放功能后，用户只能滚动屏幕，就能让您的网站看上去更像原生应用的感觉</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&quot;&gt;</code></li></ul><h4 id="常用扩展的文字图标库-Font-Awesome"><a href="#常用扩展的文字图标库-Font-Awesome" class="headerlink" title="常用扩展的文字图标库 Font Awesome"></a>常用扩展的文字图标库 Font Awesome</h4><ul><li><a href="http://www.fontawesome.com.cn/" target="_blank" rel="noopener">下载Font Awesome</a></li><li>在本地解压引入，使用</li><li>也可在Font Awesome主页的搜索去寻找对应图标</li><li>国内推荐Staticfile CDN的库，CDN导入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 新 Font Awesome 图标 CSS 文件 --&gt;</span><br><span class="line">&lt;link href=&quot;https://cdn.staticfile.org/font-awesome/5.11.2/css/fontawesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="关于对低版本IE支持：mate"><a href="#关于对低版本IE支持：mate" class="headerlink" title="关于对低版本IE支持：mate"></a>关于对低版本IE支持：mate</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 扩展对低版本IE支持,开启IE兼容模式--&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="关于解决兼容问题的扩展脚本"><a href="#关于解决兼容问题的扩展脚本" class="headerlink" title="关于解决兼容问题的扩展脚本"></a>关于解决兼容问题的扩展脚本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 图片占位，解决低版本IE不支持圆角的问题--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../bootstrap3/js/holder.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入T5和C3的js函数库，支持旧版浏览器--&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../bootstrap3/js/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../bootstrap3/js/css3-mediaqueries.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;../bootstrap3/js/respond.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Bootstrap的应用"><a href="#Bootstrap的应用" class="headerlink" title="Bootstrap的应用"></a>Bootstrap的应用</h2><h3 id="Bootstrap主页"><a href="#Bootstrap主页" class="headerlink" title="Bootstrap主页"></a>Bootstrap主页</h3><h4 id="Bootstrap3在线文档"><a href="#Bootstrap3在线文档" class="headerlink" title="Bootstrap3在线文档"></a><strong><a href="https://v3.bootcss.com/" target="_blank" rel="noopener">Bootstrap3在线文档</a></strong></h4><h4 id="Bootstrap-CSS"><a href="#Bootstrap-CSS" class="headerlink" title="Bootstrap CSS"></a>Bootstrap CSS</h4><ul><li>Bootstrap 自带以下特性：全局的 CSS 设置、定义基本的 HTML 元素样式、可扩展的 class，以及一个先进的网格系统</li></ul><h4 id="Bootstrap-布局组件"><a href="#Bootstrap-布局组件" class="headerlink" title="Bootstrap 布局组件"></a>Bootstrap 布局组件</h4><ul><li>Bootstrap 包含了十几个可重用的组件，用于创建图像、下拉菜单、导航、警告框、弹出框等等</li></ul><h4 id="Bootstrap-插件-JavaScript-插件"><a href="#Bootstrap-插件-JavaScript-插件" class="headerlink" title="Bootstrap 插件(JavaScript 插件)"></a>Bootstrap 插件(JavaScript 插件)</h4><ul><li>Bootstrap 包含了十几个自定义的 jQuery 插件。您可以直接包含所有的插件，也可以逐个包含这些插件</li></ul><h4 id="Bootstrap-定制"><a href="#Bootstrap-定制" class="headerlink" title="Bootstrap 定制"></a>Bootstrap 定制</h4><ul><li>您可以定制 Bootstrap 的组件、LESS 变量和 jQuery 插件来得到您自己的版本</li></ul><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><ul><li>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。它包含了易于使用的预定义类，还有强大的mixin 用于生成更具语义的布局</li><li>多个DIV定义的栅格系统中，最外层<code>.cntainer</code>内嵌套多个<code>.row</code>，每行内添加列，若3列，3列的属性都为<code>.col-md-4</code></li><li>上述最外层可选：<code>.cntainer</code>（固定宽度）或<code>.cntainer-fluid</code>（100% 宽度），列默认分为12列</li><li>定义盒子模型：<ul><li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）</li><li>通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code></li></ul></li><li>当超过了设定的栅格列数，则超出部分会作为整体另起一行</li><li>栅格可以嵌套栅格，如：行(row) 内的元素，可以嵌套另一个 行(row)</li></ul><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><ul><li>会根据媒体实际分辨率定义不同的样式，格式如下，例如下下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: @screen-xs-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-md-min) and (max-width: @screen-md-max) &#123; ... &#125;</span><br><span class="line">@media (min-width: @screen-lg-min) &#123; ... &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@media (max-width: 768px) &#123; CSS代码 &#125;</span><br><span class="line">@media (min-width: 768px) and (max-width: 992px) &#123; CSS代码 &#125;</span><br><span class="line">@media (min-width: 992px) and (max-width: 1200px) &#123; CSS代码 &#125;</span><br><span class="line">@media (min-width: 1200px) &#123; CSS代码 &#125;</span><br></pre></td></tr></table></figure><h3 id="栅格参数"><a href="#栅格参数" class="headerlink" title="栅格参数"></a>栅格参数</h3><ul><li>通过下表可以详细查看 Bootstrap 的栅格系统是如何在多种屏幕设备上工作的</li><li>class中同时设定<code>.col-xs-  .col-sm-  .col-md-  .col-lg-</code>可以根据不同设备大小改变列方式</li></ul><p>.|超小屏幕 手机<br>(&lt;768px)|小屏幕 平板<br>(≥768px)|中等屏幕 桌面显示器<br>(≥992px)|大屏幕 大桌面显示器<br>(≥1200px)<br>-|-|-|-<br>栅格系统行为|总是水平排列|开始是堆叠在一起的，当大于这些阈值时将变为水平排列C|同|同<br>.container 最大宽度|None （自动）|750px|970px|1170px<br>类前缀|.col-xs-|.col-sm-|.col-md-|.col-lg-<br>列（column）数|12|同|同|同<br>最大列（column）宽|自动|<del>62px|</del>81px|~97px<br>槽（gutter）宽|30px （每列左右均有 15px）|同|同|同<br>可嵌套|是|是|是|是<br>偏移（Offsets）|是|是|是|是<br>列排序|是|是|是|是</p><h3 id="响应式列重置"><a href="#响应式列重置" class="headerlink" title="响应式列重置"></a>响应式列重置</h3><ul><li>在某些阈值时，某些列可能会出现比别的列高的情况。为了克服这一问题，建议联合使用 <code>.clearfix</code> 和 响应式工具类</li></ul><h3 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h3><ul><li>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）</li><li>例如：<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web基础-Bootstrap&quot;&gt;&lt;a href=&quot;#Web基础-Bootstrap&quot; class=&quot;headerlink&quot; title=&quot;Web基础-Bootstrap&quot;&gt;&lt;/a&gt;Web基础-Bootstrap&lt;/h1&gt;&lt;h2 id=&quot;Bootstrap概述&quot;&gt;
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Bootstrap" scheme="http://yoursite.com/tags/Bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Web基础-jQuery语言</title>
    <link href="http://yoursite.com/2019/12/09/Web%E5%9F%BA%E7%A1%80-jQuery%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2019/12/09/Web%E5%9F%BA%E7%A1%80-jQuery%E8%AF%AD%E8%A8%80/</id>
    <published>2019-12-09T12:02:24.000Z</published>
    <updated>2019-12-09T12:01:06.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web基础-jQuery语言"><a href="#Web基础-jQuery语言" class="headerlink" title="Web基础-jQuery语言"></a>Web基础-jQuery语言</h1><h2 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h2><h3 id="什么是jQuery"><a href="#什么是jQuery" class="headerlink" title="什么是jQuery"></a>什么是jQuery</h3><ul><li>jQuery是一个优秀的JavaScript框架，一个轻量级的JS库</li><li>它封装了JS、CSS、DOM，提供了一致的、简洁的API</li><li>兼容CSS3，以及兼容各种浏览器</li><li>注意：jQuery 2.x 开始不再支持IE6/7/8</li></ul><h3 id="如何使用jQuery"><a href="#如何使用jQuery" class="headerlink" title="如何使用jQuery"></a>如何使用jQuery</h3><ul><li>引入jQuery的js文件</li><li>可以通过本地文件导入，或者通过网络中jQuery的js文件地址</li><li>使用jq选择器定位要操作的节点，然后调用jq方法进行操作</li></ul><h2 id="jQuery对象"><a href="#jQuery对象" class="headerlink" title="jQuery对象"></a>jQuery对象</h2><h3 id="jQuery对象简介"><a href="#jQuery对象简介" class="headerlink" title="jQuery对象简介"></a>jQuery对象简介</h3><ul><li>jQuery为了解决浏览器的兼容问题而提供的一种统一的封装后的对象描述</li><li>jQuery提供的方法都是针对jQuery对象特有的，而且大部分方法的返回值也是jQuery对象，所以方法可以连缀调用</li><li>jQuery对象本质上是DOM对象数组，它在该数组上扩展了一些操作数组中元素的方法</li><li>jq.length：获取数组长度、jq.get(index)：获取数组中的某一个DOM对象、jq[index]：等价于obj.get(index)</li><li>jq对象与dom对象之间转换，就是选择jq对象的某个 dom = jq[0]，相反的 jq = $(dom)</li></ul><h3 id="jQuery遍历数组的方法"><a href="#jQuery遍历数组的方法" class="headerlink" title="jQuery遍历数组的方法"></a>jQuery遍历数组的方法</h3><ul><li>$(selector).each(func) ：遍历selector选中的每个对象，每个对象执行func方法，方法体内用this表示当前对象</li><li>示例：<code>$(&quot;div&quot;).each(function(){this.val=&quot;已遍历&quot;})</code></li></ul><h2 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h2><h3 id="jQuery选择器-1"><a href="#jQuery选择器-1" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><ul><li>jQuery选择器类似CSS选择器，包含以下种类：基本选择器、层次选择器、过滤选择器、表单选择器</li><li>jQuery选择器大部分采用了CSS方式，方便的选择对象，基本选择器、层次选择器基本都为CSS格式</li><li>以下详细描述了另外两种选择器的介绍和使用</li><li>节点操作节点，参考下面jQuery的遍历节点操作</li></ul><h3 id="jQuery过滤选择器"><a href="#jQuery过滤选择器" class="headerlink" title="jQuery过滤选择器"></a>jQuery过滤选择器</h3><h4 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h4><ul><li>:first：第一个元素</li><li>:last：最后一个元素</li><li>:not(jq)：把jq对象排除在外</li><li>:even：挑选偶数行</li><li>:odd：挑选奇数行</li><li>:eq(index)：下标等于index的元素(从0开始计算)</li><li>:gt(index)：下标大于index的元素</li><li>:lt(index)：下标小于index的元素</li></ul><h4 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h4><ul><li>:first-child ：匹配第一个子元素</li><li>:last-child ：匹配最后一个子元素</li><li>:nth-child(n) ：匹配第n个子元素(不是从0开始计算)</li></ul><h4 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h4><ul><li>:contains(‘text’)：匹配包含给定文本的元素</li><li>:empty：匹配所有不包含子元素或文本的空元素</li><li>:has(jq)：匹配包含jq对象的元素</li><li>:parent：匹配非空的元素</li></ul><h4 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h4><ul><li>:hidden ：匹配所有不可见元素，或type为hidden的元素</li><li>:visible：匹配所有可见元素</li></ul><h4 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h4><ul><li>类似CSS中属性选择器</li><li>例如：<code>$(&quot;input[value=&#39;你好&#39;]&quot;)</code></li></ul><h4 id="状态过滤选择器"><a href="#状态过滤选择器" class="headerlink" title="状态过滤选择器"></a>状态过滤选择器</h4><ul><li>:enabled 匹配可用的元素</li><li>:disabled 匹配不可用的元素</li><li>:checked 匹配选中的checkbox、option(单选、多选、下拉选)</li><li>:selected 匹配选中的option</li></ul><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>:input</td><td>匹配所有表单控件</td></tr><tr><td>:text</td><td>匹配文本框</td></tr><tr><td>:password</td><td>匹配密码框</td></tr><tr><td>:radio</td><td>匹配单选框</td></tr><tr><td>:checkbox</td><td>匹配多选框</td></tr><tr><td>:submit</td><td>匹配提交按钮</td></tr><tr><td>:reset</td><td>匹配重置按钮</td></tr><tr><td>:button</td><td>匹配普通按钮</td></tr><tr><td>:file</td><td>匹配文件框</td></tr><tr><td>:hidden</td><td>匹配隐藏框</td></tr></tbody></table><h2 id="jQuery操作DOM"><a href="#jQuery操作DOM" class="headerlink" title="jQuery操作DOM"></a>jQuery操作DOM</h2><h3 id="读写节点"><a href="#读写节点" class="headerlink" title="读写节点"></a>读写节点</h3><ul><li>读写节点的HTML内容：<code>obj.html() / obj.html(&quot;&lt;span&gt;123&lt;/span&gt;&quot;)</code></li><li>读写节点的文本内容：<code>obj.text() / obj.text(&quot;123&quot;)</code></li><li>读写节点的value属性值：<code>obj.val() / obj.val(&quot;abc&quot;)</code></li><li>读写节点的属性值：<code>obj.attr(&quot;属性名&quot;) / obj.attr(&quot;属性名&quot;,&quot;属性值&quot;)</code></li></ul><blockquote><p>Jquery1.6之后，它将“属性”与“特性”做了区别，属性指的是“name，id”等等，特性指的是“selectedIndex, tagName, nodeName”等等。可以通过attr方法去获得属性，通过prop方法去获得特性。<br>$(“#cb”).attr(“tagName”); //undefined<br>$(“#cb”).prop(“tagName”); //INPUT<br>那么，什么时候使用attr()，什么时候使用prop()？  </p><ol><li>添加属性名称该属性就会生效应该使用prop();  </li><li>是有true,false两个属性使用prop();  </li><li>其他则使用attr();  </li></ol></blockquote><h3 id="增删节点"><a href="#增删节点" class="headerlink" title="增删节点"></a>增删节点</h3><ul><li>创建DOM节点：语法<code>$(&quot;节点内容&quot;)</code>，例如：<code>$(&quot;&lt;span&gt;你好&lt;/span&gt;&quot;)</code></li><li>插入DOM节点：<ol><li>element.append(obj) 作为最后一个节点添加进来</li><li>element.prepend(obj) 作为第一个节点添加进来</li><li>element.after(obj) 作为元素的下一个节点添加进来</li><li>element.before(obj) 作为元素的上一个节点添加进来</li></ol></li><li>删除DOM节点：<ol><li>obj.remove() 删除节点</li><li>obj.remove(selector) 只删除满足selector的节点</li><li>obj.empty() 清空节点</li></ol></li></ul><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><ul><li>addClass(“”) 追加样式</li><li>removeClass(“”) 移除指定样式</li><li>removeClass() 移除所有样式</li><li>toggleClass(“”) 切换样式</li><li>hasClass(“”) 判断是否有某个样式</li><li>css(“”) 读取css的值</li><li>css(“”,””) 设置多个样式</li><li>css(“{….}”) 设置样式</li></ul><h3 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>siblings([selector])</td><td>返回所有兄弟元素</td></tr><tr><td>prev([selector])</td><td>返回同级上一个元素</td></tr><tr><td>prevAll([selector])</td><td>返回同级上所有元素</td></tr><tr><td>next([selector])</td><td>返回同级下一个元素</td></tr><tr><td>nextAll([selector])</td><td>返回同级下所有元素</td></tr><tr><td>chirldren([selector])</td><td>返回所有子元素</td></tr><tr><td>parent()</td><td>返回父元素</td></tr><tr><td>find(selector)</td><td>查找满足选择器的所有后代</td></tr></tbody></table><h2 id="jQuery事件"><a href="#jQuery事件" class="headerlink" title="jQuery事件"></a>jQuery事件</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li>语法：$obj.bind(事件类型，事件处理函数)，如 <code>$obj.bind(&quot;click&quot;,func)</code></li><li>简写形式：如 <code>$obj.click(func)</code></li><li>获取事件对象event，只需要在事件函数中传入一个参数，例如：<code>$obj.click(function(e){...})</code></li><li>事件对象的常用属性：<ul><li>获取事件源 e.target <strong>返回DOM对象</strong></li><li>获取鼠标点击坐标 e.pageX 、 e.pageY</li></ul></li></ul><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><ul><li>子节点产生的事件会依次向上抛给父节点</li><li>为了避免事件冒泡，我们可以设置取消事件冒泡</li><li>代码：<code>e.stopPropagation()</code> ，用于取消事件冒泡</li></ul><h3 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a>合成事件</h3><ul><li>hover(mouseenter,mouseleave) 用于模拟光标悬停事件</li><li>toggle() 在多个事件响应中切换</li></ul><h3 id="模拟操作"><a href="#模拟操作" class="headerlink" title="模拟操作"></a>模拟操作</h3><ul><li>语法：$obj.trigger(事件类型) 例如：<code>$obj.trigger(&quot;focus&quot;)</code></li><li>简写形式：如 <code>$obj.focus()</code></li></ul><h2 id="jQuery动画"><a href="#jQuery动画" class="headerlink" title="jQuery动画"></a>jQuery动画</h2><h3 id="显示隐藏动画"><a href="#显示隐藏动画" class="headerlink" title="显示隐藏动画"></a>显示隐藏动画</h3><ul><li>语法： show() / hide() , 通过改变元素的宽度和高度来实现显示或者隐藏</li><li>用法： <code>$obj.show(执行时间,回调函数);</code><ul><li>执行时间：slow,normla,fast,毫秒数</li><li>回调函数：动画执行完毕后执行的函数</li></ul></li><li>toggle();</li></ul><h3 id="上下滑动式"><a href="#上下滑动式" class="headerlink" title="上下滑动式"></a>上下滑动式</h3><ul><li>语法： slideDown() / slideUp() , 通过改变元素的高度来实现显示或者隐藏</li><li>用法同上</li><li>slideToggle();</li></ul><h3 id="淡入淡出效果"><a href="#淡入淡出效果" class="headerlink" title="淡入淡出效果"></a>淡入淡出效果</h3><ul><li>语法： fadeIn() / fadeOut() , 通过改变元素的不透明度opacity来实现显示或者隐藏</li><li>用法同上</li><li>fadeToggle();</li></ul><h3 id="自定义动画效果"><a href="#自定义动画效果" class="headerlink" title="自定义动画效果"></a>自定义动画效果</h3><ul><li>语法：<code>animate(偏移位置,执行时间,回调函数)</code><ul><li>偏移位置：{}描述动画执行之后元素的样式</li><li>执行时间：毫秒数</li><li>回调函数：动画执行结束后要执行的函数</li></ul></li><li>使用示例：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;div&quot;).click(function()&#123;</span><br><span class="line">    $(this).animate(&#123;&apos;left&apos;,&apos;500px&apos;&#125;,4000);</span><br><span class="line">    $(this).animate(&#123;&apos;top&apos;,&apos;300px&apos;&#125;,2000);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web基础-jQuery语言&quot;&gt;&lt;a href=&quot;#Web基础-jQuery语言&quot; class=&quot;headerlink&quot; title=&quot;Web基础-jQuery语言&quot;&gt;&lt;/a&gt;Web基础-jQuery语言&lt;/h1&gt;&lt;h2 id=&quot;jQuery简介&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
      <category term="JQ" scheme="http://yoursite.com/tags/JQ/"/>
    
  </entry>
  
  <entry>
    <title>JSP学习笔记</title>
    <link href="http://yoursite.com/2019/12/09/JSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/09/JSP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-09T12:02:22.000Z</published>
    <updated>2019-12-26T06:59:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP学习笔记"><a href="#JSP学习笔记" class="headerlink" title="JSP学习笔记"></a>JSP学习笔记</h1><h2 id="JSP概述"><a href="#JSP概述" class="headerlink" title="JSP概述"></a>JSP概述</h2><h3 id="什么是JSP"><a href="#什么是JSP" class="headerlink" title="什么是JSP"></a>什么是JSP</h3><ul><li>JSP是由SUN公司提供的一门动态Web资源开发技术</li><li>JSP看起来像一个HTML，但和html不同的是，JSP中可以书写Java代码，可以通过Java代码获取动态的数据</li><li>JSP其实本质上就是一个Servlet程序</li></ul><h3 id="JSP包含部分"><a href="#JSP包含部分" class="headerlink" title="JSP包含部分"></a>JSP包含部分</h3><p>&emsp;<strong>静态内容：</strong>HTML标记<br>&emsp;<strong>动态内容(JSP元素)：</strong>Jsp标记、脚本元素、注释等</p><h3 id="JSP执行过程"><a href="#JSP执行过程" class="headerlink" title="JSP执行过程"></a>JSP执行过程</h3><ul><li>JSP在第一次被访问时，会翻译成一个Servlet程序，在访问JSP后看到的网页，其实就是翻译后的Servlet程序输出的网页</li><li>访问index.jsp –翻译–&gt; index_jsp.java(Servlet) –编译–&gt; index_jsp.class(运行) –结果–&gt; 输出一个网页到浏览器</li><li>由于访问JSP需要在服务器端翻译、编译、运行，最终响应给浏览器一个html网页，而访问html会直接将html发送给浏览器解析，因此html运行效率比jsp高</li></ul><h2 id="JSP语法"><a href="#JSP语法" class="headerlink" title="JSP语法"></a>JSP语法</h2><h3 id="模板元素"><a href="#模板元素" class="headerlink" title="模板元素"></a>模板元素</h3><p>&emsp;除了JSP特有内容以外的其他内容都属于模板元素。模板元素在翻译后的servlet中，是直接被out.write()原样发送给浏览器，由浏览器负责解析并显示</p><h3 id="JSP表达式"><a href="#JSP表达式" class="headerlink" title="JSP表达式"></a>JSP表达式</h3><ul><li>JSP表达式书写格式：<code>&lt;%= 常量/变量/表达式 %&gt;</code></li><li>作用: 在翻译后的Servlet中，计算表达式的值，将计算的结果输出到浏览器，由浏览器负责解析并显示</li></ul><h3 id="JSP脚本片段"><a href="#JSP脚本片段" class="headerlink" title="JSP脚本片段"></a>JSP脚本片段</h3><ul><li>JSP脚本片段书写格式：<code>&lt;% 若干Java语句 %&gt;</code></li><li>作用: 在翻译后的Servlet中，将脚本片段中的java语句复制粘贴到对应的位置执行</li><li>有两种书写形式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 循环输出<span class="number">5</span>行<span class="string">"hello jsp..."</span> --&gt;</span><br><span class="line">&lt;% </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        out.write(<span class="string">"hello jsp...&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="comment">//上方是JSP中的代码，下方为翻译到Servlet中的代码</span></span><br><span class="line">out.write(<span class="string">"\t&lt;!-- 循环输出5行\"hello jsp...\" --&gt;\r\n"</span>);</span><br><span class="line">out.write(<span class="string">"\t"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">out.write(<span class="string">"hello jsp...&lt;br/&gt;"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123; %&gt;</span><br><span class="line">hello jsp~~~&lt;br/&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">//上方是JSP中的代码，下方为翻译到Servlet中的代码</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123; </span><br><span class="line">  out.write(<span class="string">"\r\n"</span>);</span><br><span class="line">  out.write(<span class="string">"\t\thello jsp~~~&lt;br/&gt;\r\n"</span>);</span><br><span class="line">  out.write(<span class="string">"\t"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>写在某一个脚本片段中的Java代码可以是不完整的，但是最终的所有脚本片段中的内容加在一起，必须是完整符合Java语法的</p><h3 id="JSP注释"><a href="#JSP注释" class="headerlink" title="JSP注释"></a>JSP注释</h3><ul><li>JSP注释书写格式：<code>&lt;%-- 注释内容 --%&gt;</code></li><li>作用: 普通注释作用</li><li>关于JSP注释，在翻译时，直接将JSP注释丢弃，不参与翻译过程</li><li>在JSP中可以书写JSP注释、java注释、html注释，注意他们在翻译时的区别(是否返回到浏览器)</li></ul><h3 id="JSP指令"><a href="#JSP指令" class="headerlink" title="JSP指令"></a>JSP指令</h3><ul><li>JSP指令书写格式：<code>&lt;%@ 指令名称 若干属性声明... %&gt;</code></li><li>作用: 用于指挥JSP解析引擎如何将一个JSP翻译成一个Servlet程序</li><li>page指令：用于声明JSP文件的基本属性信息，如：jsp使用的开发语言,jsp使用的编码,jsp中需要引入哪些包等</li><li>include指令：可以实现页面包含的效果，即页面的合并效果</li><li>taglib指令：taglib指令是用于引入JSTL标签库或者其他标签库时用的，在引入之前还需要导入JSTL相关的jar包，参考本文 JSTL标签库</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span>%&gt;  <span class="comment">//用于指定jsp开发的语言</span></span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span>%&gt;  <span class="comment">//用于导入包</span></span><br><span class="line">&lt;%@ page pageEncoding=<span class="string">"UTF-8"</span>%&gt;  <span class="comment">//指定jsp指定的字符集</span></span><br><span class="line"><span class="comment">//也可以合并一起书写</span></span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> pageEncoding=<span class="string">"UTF-8"</span> <span class="keyword">import</span>=<span class="string">"java.util.Date"</span>%&gt;</span><br><span class="line"><span class="comment">//将头部jsp引入到标签位置</span></span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">"/_header.jsp"</span> %&gt;</span><br></pre></td></tr></table></figure><h2 id="JSP标签技术"><a href="#JSP标签技术" class="headerlink" title="JSP标签技术"></a>JSP标签技术</h2><p>&emsp;<strong>由于JSP页面中html代码和java代码非常混乱，JSP 2.0版本中，sun提出了JSP标签技术，推荐使用标签来代替JSP页面中java代码，并且推荐，JSP2.0以后不要在JSP页面中出现任何一行java代码</strong></p><h3 id="EL表达式"><a href="#EL表达式" class="headerlink" title="EL表达式"></a>EL表达式</h3><ul><li>EL表达式在JSP中可以非常方便的获取数据，可以代替JSP页面中的JSP表达式 <code>&lt;%=  %&gt;</code></li><li>语法结构: <code>${ 表达式 }</code></li><li>主要作用: 主要用于获取域中的数据<ul><li>EL只能获取域中的数据，不能往域中添加数据或修改域中已有的数据</li><li>EL只能获取域中的数据，不能遍历数据（比如数组或集合）</li></ul></li><li>EL寻找变量，EL根据域的大小，按照从小到大去寻找：pageContext &lt; request &lt; session &lt; application</li><li>EL的使用方式：<ul><li>获取常量、表达式、变量的值（变量得先存入域中），例如：<code>${ Key }</code> 前提在域中设定了</li><li>获取作用域中数组或集合中的元素，例如：${ List[0] } <br/>`</li><li>获取作用域中map集合中的元素，例如：<code>${ Map.name }</code></li><li>获取作用域中JavaBean对象的属性值，例如：<code>${ user.username }</code> 底层调用了user对象的getUsername()方法</li></ul></li></ul><h3 id="JSTL标签库"><a href="#JSTL标签库" class="headerlink" title="JSTL标签库"></a>JSTL标签库</h3><ul><li>JSTL标签库是为JavaWeb开发人员提供的一套标准通用的标签库</li><li>JSTL标签库和EL配合使用可以取代JSP中大部分的Java代码</li><li>使用前准备：<ol><li>导入JSTL的开发包</li><li>在使用JSTL标签库的JSP中引入JSTL</li></ol></li></ul><h3 id="lt-c-set-gt-lt-c-set-gt"><a href="#lt-c-set-gt-lt-c-set-gt" class="headerlink" title="&lt;c:set&gt;&lt;/c:set&gt;"></a><code>&lt;c:set&gt;&lt;/c:set&gt;</code></h3><p><strong>往四大作用域中添加一个域属性：</strong><br>&emsp;例如：<code>&lt;c:set var=&quot;name&quot; value=&quot;Tom&quot; scope=&quot;page&quot;/&gt;</code>，就是向page作用域添加一个name属性，其值为Tom</p><p><strong>修改四大作用域中已有的属性：</strong><br>&emsp;如果重复添加相同的属性，值会发生覆盖，相当于修改，书写形式与上相同</p><p><strong>修改作用域中Map集合中的属性：</strong><br>&emsp;例如：<code>&lt;c:set target=&quot;${map}&quot; property=&quot;name&quot; value=&quot;Tom&quot;/&gt;</code>，将作用域中Map的map对象的name属性该值为Tom</p><p><strong>属性解释：</strong>  </p><ul><li>var – 指定存入作用域中的属性名称</li><li>value – 指定存入作用域中属性的值</li><li>scope – 指定将属性存入哪一个作用域中，取值：<ul><li>page表示pageContext域</li><li>request表示request域</li><li>session表示session域</li><li>application表示ServletContext域</li></ul></li></ul><h3 id="lt-c-if-gt-lt-c-if-gt"><a href="#lt-c-if-gt-lt-c-if-gt" class="headerlink" title="&lt;c:if&gt;&lt;/c:if&gt;"></a><code>&lt;c:if&gt;&lt;/c:if&gt;</code></h3><p><strong>构造if…else…语句：</strong>注意JSTL中没有提供else对应的标签，只有if，其值test属性用于指定判断的条件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"num"</span>  value=<span class="string">"5"</span>/&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123; num &gt; 0 &amp;&amp; num &lt; 10 &#125;"</span>&gt;</span><br><span class="line">已进入判断条件中</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-c-forEach-gt-lt-c-forEach-gt"><a href="#lt-c-forEach-gt-lt-c-forEach-gt" class="headerlink" title="&lt;c:forEach&gt;&lt;/c:forEach&gt;"></a><code>&lt;c:forEach&gt;&lt;/c:forEach&gt;</code></h3><p><strong>遍历域中数组或集合中的元素：</strong><br>&emsp;遍历域中数组或集合中的元素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123;nameList&#125;"</span> <span class="keyword">var</span>=<span class="string">"name"</span>&gt;</span><br><span class="line">$&#123; name &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p><strong>遍历域中数组或集合中的元素：</strong><br>&emsp;遍历域中map集合中的元素</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach items=<span class="string">"$&#123; map &#125;"</span> <span class="keyword">var</span>=<span class="string">"entry"</span>&gt;</span><br><span class="line">$&#123; entry.key &#125; : $&#123; entry.value &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p><strong>遍历域中数组或集合中的元素：</strong><br>&emsp;遍历0~100之间的整数，将是3的倍数的数值输出到浏览器中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:forEach begin=<span class="string">"0"</span> end=<span class="string">"100"</span> <span class="keyword">var</span>=<span class="string">"i"</span> &gt; 　</span><br><span class="line">    $&#123; i%<span class="number">3</span>==<span class="number">0</span>? i : <span class="string">""</span> &#125; &lt;br&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p><strong>属性解释：</strong>  </p><ul><li>items: 指定需要遍历的集合或数组</li><li>var: 指定用于接收遍历过程中的元素</li><li>begin: 指定循环从哪儿开始</li><li>end: 指定循环到哪儿结束</li><li>step: 指定循环时的步长, 默认值是1</li><li>varStatus: 用于表示循环遍历状态信息的对象, 常用属性有:<ul><li>first属性: 表示当前遍历是否是第一次, 若是, 则返回true</li><li>last属性: 表示当前遍历是否是最后一次, 若是, 则返回true</li><li>count属性: 记录当前遍历是第几次</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSP学习笔记&quot;&gt;&lt;a href=&quot;#JSP学习笔记&quot; class=&quot;headerlink&quot; title=&quot;JSP学习笔记&quot;&gt;&lt;/a&gt;JSP学习笔记&lt;/h1&gt;&lt;h2 id=&quot;JSP概述&quot;&gt;&lt;a href=&quot;#JSP概述&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="技术环境" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%8E%AF%E5%A2%83/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Web基础-JavaScript语言</title>
    <link href="http://yoursite.com/2019/12/09/Web%E5%9F%BA%E7%A1%80-JavaScript%E8%AF%AD%E8%A8%80/"/>
    <id>http://yoursite.com/2019/12/09/Web%E5%9F%BA%E7%A1%80-JavaScript%E8%AF%AD%E8%A8%80/</id>
    <published>2019-12-09T12:01:20.000Z</published>
    <updated>2019-12-09T12:00:14.372Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Web基础-JavaScript语言"><a href="#Web基础-JavaScript语言" class="headerlink" title="Web基础-JavaScript语言"></a>Web基础-JavaScript语言</h1><h2 id="JavaScript概述"><a href="#JavaScript概述" class="headerlink" title="JavaScript概述"></a>JavaScript概述</h2><h3 id="什么是JavaScript"><a href="#什么是JavaScript" class="headerlink" title="什么是JavaScript"></a>什么是JavaScript</h3><ul><li>JavaScript是嵌入HTML中的脚本语言</li><li>用于向HTML页面添加交互行为</li><li>不进行预编译，由浏览器解析执行</li></ul><h3 id="JavaScript语言特点"><a href="#JavaScript语言特点" class="headerlink" title="JavaScript语言特点"></a>JavaScript语言特点</h3><ul><li>属于弱类型语言</li><li>基于面向对象：内置大量线程对象</li><li>安全性高：js语言智能访问浏览器内部数据，不能访问浏览器以外的数据</li><li>交互性高：js语言可以直接嵌入到html页面中，可以直接和页面中的用户进行交互</li></ul><h3 id="导入JavaScript方法"><a href="#导入JavaScript方法" class="headerlink" title="导入JavaScript方法"></a>导入JavaScript方法</h3><ul><li>总共有三种方式：事件定义式、嵌入式、文件调用式</li><li>事件定义式：在标签的事件属性中添加js代码，当事件触发时执行</li><li>嵌入式：定义在HTML的任意位置，标签内写js代码，通常建议写在body标签末尾<ul><li>使用<code>script</code>标签，属性<code>type=&quot;text/script&quot;</code>，在标签体内书写</li><li>例如：<code>&lt;script type=&quot;text/javascript&quot;&gt;js代码&lt;/script&gt;</code></li></ul></li><li>文件调用式：定义在一个外部的js文件中，HTML页面引用<ul><li>使用<code>script</code>标签，属性<code>type=&quot;text/script&quot;</code>，属性<code>src=&quot;js文件&quot;</code></li><li>例如：<code>&lt;script type=&quot;text/javascript&quot; src=&quot;js文件&quot;&gt;&lt;/script&gt;</code></li></ul></li></ul><h2 id="JavaScript基础语法"><a href="#JavaScript基础语法" class="headerlink" title="JavaScript基础语法"></a>JavaScript基础语法</h2><h3 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h3><ul><li>Unicode字符集编写，大小写敏感，使用分号或换行结束，一般都以分号结束，代码中的空格会被忽略</li><li>注释使用//或/* */</li><li>不以数字开头的字母、数字、下划线、美元符号组成</li><li>特定字符保留字不允许程序再定义</li><li>使用var关键字声明为全局变量，使用let关键字声明为局部变量</li><li>谷歌浏览器会把定义id的元素，自动获取本身对象到id名称变量中</li></ul><h3 id="JavaScript语法"><a href="#JavaScript语法" class="headerlink" title="JavaScript语法"></a>JavaScript语法</h3><table><thead><tr><th>命名</th><th>语法</th><th>备注</th></tr></thead><tbody><tr><td>变量(对象)声明</td><td>var/let &lt;变量名&gt;</td><td>var age;var name=’明’;<br>var person={name:”xiao”,age:”20”,id:”123456”};</td></tr><tr><td>常量声明</td><td>const &lt;变量名&gt;</td><td>只对基本数据类型生效(Number、String、Boolean等)</td></tr><tr><td>if分支</td><td>if(布尔表达式){<br>}else if(布尔表达式){<br>}else{}</td><td>不使用大括号默认认为下一个；前的语句属于if-true分支内,效率比switch低,switch直接进入不是挨个判断</td></tr><tr><td>switch分支</td><td>switch(表达式){<br>default:<br>&emsp;默认语句;<br>&emsp;break;<br>case 常量:<br>&emsp;语句;<br>&emsp;break;}</td><td>case说明程序开始，break说明结束(退出分支),没有则case穿透,default可以不在最后面但是不要忘记break</td></tr><tr><td>for循环</td><td>for(var/let i = 0;i &lt; 9;i++){}</td><td>for(;;){}默认死循环,()内多条语句用<code>,</code>但是注意第一块如果有声明只能一个类型的多声明</td></tr><tr><td>while循环</td><td>while(布尔表达式){}<br>do{}while(布尔表达式)</td><td>continue跳过本次循环继续下次循环</td></tr></tbody></table><ul><li>false一切表示空的值都是：false/0/null/“”/undefined/NaN</li><li>true：true/“非空”值</li><li>Number字符可以用3e2赋值，为300</li></ul><h3 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h3><ul><li>特殊类型：null(空)、undefined(未定义)</li><li>内置对象：Number(数字:整数和小数)、Sting(字符串)、Boolean(布尔)、Function(函数)、Array(数组)</li><li>外部对象：window(浏览器对象)、document(文档对象)</li><li>自定义对象：Object(自定义对象)</li><li>Number统一使用4字节浮点格式存储，Boolean运算时true=1,false=0</li><li>null表示无值或者无对象，undefined表示声明了变量但为赋值，或者对象属性不存在</li><li>使用<code>typeof()</code>方法传入对象，返回对象类型，以字符串类型显示</li></ul><h3 id="数据类型的隐式转换"><a href="#数据类型的隐式转换" class="headerlink" title="数据类型的隐式转换"></a>数据类型的隐式转换</h3><ul><li>数字+字符串：数字转为字符串</li><li>数字+布尔值：布尔转换1或0</li><li>字符串+布尔值：布尔转为为字符串true或false</li><li>布尔值+布尔值：布尔值转换1或0</li></ul><h3 id="特殊运算符规则"><a href="#特殊运算符规则" class="headerlink" title="特殊运算符规则"></a>特殊运算符规则</h3><ul><li><code>==</code>与<code>===</code>的区别：前者会先统一类型再比较值，后者先比较类型再比较值</li><li>进而存在<code>!=</code>与<code>!==</code>，不等、不全等</li><li>JS在除法运算中，计算后的结果会根据实际值存储为整数或小数</li></ul><h3 id="JavaScript方法声明"><a href="#JavaScript方法声明" class="headerlink" title="JavaScript方法声明"></a>JavaScript方法声明</h3><ul><li>function 方法名(参数列表){方法体}</li><li>var 方法名 = function(参数列表){方法体}</li><li>var 方法名 = new Function(“参数1”,”参数2”…,”方法体”)</li></ul><h2 id="JavaScript内置对象"><a href="#JavaScript内置对象" class="headerlink" title="JavaScript内置对象"></a>JavaScript内置对象</h2><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li>常见String对象创建方式：<code>var str=&quot;myString&quot;</code> 和 <code>var str=new String(&quot;myString&quot;)</code></li><li>属性：length，存储字符串长度</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>toLowerCase()</td><td>转换为小写</td></tr><tr><td>toUpperCase()</td><td>转换为大写</td></tr><tr><td>charAt(index)</td><td>返回指定位置的字符</td></tr><tr><td>formCharCode(num)</td><td>返回num对应的值(ASCII)，不区分大小写</td></tr><tr><td>charCodeAt(index)</td><td>返回指定位置字符的Unicode编码</td></tr><tr><td>indexOf(findsrt[,index])</td><td>从制定位置，从头开始寻找findstr出现的第一个位置</td></tr><tr><td>lastIndexOf(findsrt[,index])</td><td>从制定位置，从尾开始寻找findstr出现的第一个位置</td></tr><tr><td>substring(start[,end])</td><td>截取字符串，从start到end(不写默认到最后)</td></tr><tr><td>replace(findstr,tostr)</td><td>替换字符串内的字符</td></tr><tr><td>split(bystr[,length])</td><td>根据bystr分隔字符串，可以指定返回数组的最大长度length</td></tr><tr><td>正则表达式相关</td><td></td></tr><tr><td>replace(regexp,tostr)</td><td>将与正则相匹配的替换为tostr</td></tr><tr><td>match(regexp)</td><td>返回匹配字符串的数组</td></tr><tr><td>search(regexp)</td><td>返回匹配字符串的首字符位置索引</td></tr></tbody></table><h3 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h3><ul><li>Number是数值对象，储存整数和小数，都是通过32位浮点方式储存</li><li>方法：toFixed(num)，转换为字符串，并保留小数点后一定位数</li></ul><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li>常见Array对象创建方式：<code>var a=new Array(1,2,3)</code>和<code>var a=[[a00,a01],[a10,a11]]</code></li><li>属性：length，存储数组内元素个数</li><li>特殊的：数组内可以储存不同类型元素，js的数组是<strong>可变长度</strong>的</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ar.reverse()</td><td>改变数组中数值的顺序</td></tr><tr><td>ar.sort([sortfunc])</td><td>数组排序,可选使用某方法进行排序,方法返回正负零</td></tr><tr><td>ar.push(“11”,”22”)</td><td>在末尾增加元素</td></tr><tr><td>delete ar[1]</td><td>删除指定位元素</td></tr><tr><td>ar.pop()</td><td>在末尾删除元素，返回删除值</td></tr><tr><td>ar.shift()</td><td>在开始删除元素，返回删除值</td></tr><tr><td>ar.unshift(“11”)</td><td>在开始增加元素，返回元素个数</td></tr><tr><td>ar.toString()</td><td>数组转为字符串</td></tr><tr><td>ar.join(“—”)</td><td>数组转为字符串，用—连接</td></tr><tr><td>ar1.concat(ar2)</td><td>合并数组，ar2也可以直接写元素</td></tr><tr><td>ar.splice(start,length)</td><td>删除、替换、插入元素,会改变原数组</td></tr><tr><td>ar.slice(start,end)</td><td>切取数组一段,不会改变原数组,返回切取得元素</td></tr><tr><td>for—in—</td><td>遍历数组或对象for(x in obj){alert(obj[x]);}<br>这里的x表示obj.key obj[x]就是obj.key.value</td></tr></tbody></table><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><ul><li>该对象常用它的方法与属性、常量</li><li>无需创建对象，直接把Math作为对象使用</li><li>常用属性：Math.PI 、 Math.E</li><li>三角函数：sin(x)、cos(x)、tan(x) 等</li><li>计算函数：sqrt(x)、log(x)、exp(x) 等</li><li>数值比较函数：abs(x)、max(x,y,…)、random() 、round(x) 等等</li></ul><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><ul><li>常见Date对象创建方式：<code>var now=new Date()</code>和<code>var date=new Date(&quot;2018/8/8 08:00&quot;)</code></li><li>读写毫秒数：getTime() 、 setTime(ms)</li><li>读写毫秒数：getDate() 、 getDay() 、 getFullYear() ，set…</li><li>转换为字符串：toString() 、 toLocaleTimeString() 、 toLocaleDateString()</li></ul><h3 id="RegExp对象"><a href="#RegExp对象" class="headerlink" title="RegExp对象"></a>RegExp对象</h3><ul><li>常见Date对象创建方式：<code>var reExp=/pattern/flags</code>和<code>var reExp=new RegExp(&quot;pattern&quot;[,&quot;flags&quot;])</code></li><li>flags表示有以下几个：<ul><li>g：设定当前匹配为全局模式</li><li>i：忽略匹配中的大小写检测</li></ul></li><li>创建对象示例：<code>var reg=/^\d{3,6}$/</code>或者<code>var reg=new RgeExp(&quot;^\d{3,6}$&quot;)</code></li><li>方法：RegExpObject.test(string)，检测string是否含有与RegExpObject匹配的文本，返回布尔</li><li>方法：RegExpObject.exec(string)，如果string中有与RegExpObject匹配的文本，将该文本返回</li></ul><h3 id="Function对象"><a href="#Function对象" class="headerlink" title="Function对象"></a>Function对象</h3><ul><li>方法对象，具体创建与使用可以参考上方，方法的创建方式</li><li>内置arguments对象，是一种特殊的对象，表示函数的参数数组，用于访问参数</li><li>arguments.length：函数的参数个数</li><li>arguments[i]：第i个参数</li><li>可以利用arguments实现可变参数的函数</li><li>可以通过<code>func.apply([thisObj [,argArray]])</code>方法或<code>call([thisObject[,arg1 [,arg2 [,...,argn]]]])</code>方法调用函数</li><li>以上参数1是函数运行的作用域，另一个是参数数组/参数罗列</li></ul><h3 id="Object自定对象"><a href="#Object自定对象" class="headerlink" title="Object自定对象"></a>Object自定对象</h3><ul><li>语法：<code>var obj = new object()</code> 或 <code>var obj = {}</code> 或 <code>var obj = {key:”value”,key2:”value”}</code></li><li>使用属性：<code>obj.key</code> 和 <code>obj[&quot;key&quot;]</code></li><li>删除属性：<code>delete obj.key</code></li><li>增设方法：<code>obj.key = fun();</code> 、 <code>obj.key();</code></li></ul><h2 id="JavaScript外部对象概述"><a href="#JavaScript外部对象概述" class="headerlink" title="JavaScript外部对象概述"></a>JavaScript外部对象概述</h2><h3 id="外部对象结构"><a href="#外部对象结构" class="headerlink" title="外部对象结构"></a>外部对象结构</h3><p><img src="/Web%E5%9F%BA%E7%A1%80-JavaScript%E8%AF%AD%E8%A8%80/bomdom" alt=""></p><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><ul><li>BOM(Browser Object Model)：浏览器对象模型，用来访问和操作浏览器窗口，使JavaScript有能力与浏览器”对话”</li><li>通过使用BOM，可移动窗口、更改状态栏文本、执行其他不与页面内容发生直接联系的操作</li><li>没有相关标准，但被广泛支持</li><li>BOM对象包含整个浏览器中的所有对象，其中根对象为window</li><li>window对象，window的属性称为全局属性，方法称为全局方法，访问时可以省略掉window</li><li>window对象包含：document、frames[]、history、location、navigator、screen</li><li>其中document对象整体视为DOM对象</li></ul><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><ul><li>DOM(Document Object Model)：文档对象模型，用来操作文档</li><li>定义了访问和操作HTML文档的标准方法</li><li>应用程序通过对DOM树的操作，来实现对HTML文档数据的操作</li></ul><h2 id="浏览器对象BOM"><a href="#浏览器对象BOM" class="headerlink" title="浏览器对象BOM"></a>浏览器对象BOM</h2><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><table><thead><tr><th>对象内容</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>方法</td><td>alert(内容)</td><td>弹窗</td></tr><tr><td></td><td>parseInt()/parseFloat()</td><td>都懂</td></tr><tr><td></td><td>isNaN()</td><td>判断是否是NaN(Not a Number)，返回T/F</td></tr><tr><td></td><td>eval(code)</td><td>将code字符串视为js代码，并执行</td></tr><tr><td></td><td>confirm(内容)</td><td>弹窗是否返回T/F</td></tr><tr><td></td><td>prompt(内容，默认值)</td><td>弹窗返回输入值，取消返回null</td></tr><tr><td></td><td>Open(URL,Name,features)</td><td>目标地址，新窗口名称或窗口目标，新窗口标准<br>窗口目标：_blanck新建窗口,_parent当前窗口<br>窗口标准：width,height,top,left</td></tr><tr><td></td><td>Close()</td><td>关闭当前窗口</td></tr><tr><td></td><td>setInterval(fun,ms)</td><td>定时器(循环执行)，返回定时器ID</td></tr><tr><td></td><td>setTimeout(fun,ms)</td><td>定时器(只执行一次)，返回定时器ID</td></tr><tr><td></td><td>clearInterval(id)</td><td>定时器-清除</td></tr><tr><td></td><td>clearTimeout(id)</td><td>定时器-清除</td></tr><tr><td>属性</td><td>innerWidth</td><td>文档显示区宽度</td></tr><tr><td></td><td>innerHeight</td><td>文档显示区高度</td></tr><tr><td></td><td>prompt(内容，默认值)</td><td>弹窗返回输入值，取消返回null</td></tr></tbody></table><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>浏览过窗口的历史记录对象</li></ul><table><thead><tr><th>对象内容</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>方法</td><td>back()</td><td>回到上一个页面</td></tr><tr><td></td><td>forward()</td><td>进入下一个页面</td></tr><tr><td></td><td>go(Num)</td><td>进入相对当前页面的第N个(Num=-1上一个)l</td></tr><tr><td>属性</td><td>length</td><td>当前窗口所打开的页面数</td></tr></tbody></table><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><ul><li>窗口文件地址对象</li></ul><table><thead><tr><th>对象内容</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>方法</td><td>assign(URL)</td><td>加载新的文档—一般用于跳转</td></tr><tr><td></td><td>reload()</td><td>重新加载当前文档</td></tr><tr><td></td><td>replace(URL)</td><td>加载新的文档，与第一个类似，区别是不会产生history</td></tr><tr><td>属性</td><td>href</td><td>设置或返回完整的URL</td></tr><tr><td></td><td>host</td><td>主机名和当前端口号</td></tr></tbody></table><h3 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h3><ul><li>当前屏幕对象</li></ul><table><thead><tr><th>对象内容</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>属性</td><td>availHeight</td><td>返回屏幕高度，除Windows任务栏外</td></tr><tr><td></td><td>availWidth</td><td>返回屏幕宽度，除Windows任务栏外</td></tr><tr><td></td><td>Height</td><td>返回屏幕高度</td></tr><tr><td></td><td>Width</td><td>返回屏幕宽度</td></tr></tbody></table><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul><li>浏览器相关信息</li></ul><table><thead><tr><th>对象内容</th><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>属性</td><td>appCodeName</td><td>返回浏览器名称</td></tr><tr><td></td><td>uerAgent</td><td>获取浏览器版本信息</td></tr></tbody></table><h2 id="HTML对象DOM"><a href="#HTML对象DOM" class="headerlink" title="HTML对象DOM"></a>HTML对象DOM</h2><h3 id="DOM选择元素方法"><a href="#DOM选择元素方法" class="headerlink" title="DOM选择元素方法"></a>DOM选择元素方法</h3><ul><li>属性readyState(加载状态)：uninitialized还未开始载入 loading载入中 interactive已加载 complete载入完成</li><li>通过document打点使用方法查询</li></ul><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getElementById()</td><td>获取元素对象，ID</td></tr><tr><td>getElementsByName()</td><td>获取元素对象组，Name</td></tr><tr><td>getElementsByClassName()</td><td>获取元素对象组，Class</td></tr><tr><td>getElementsByTagName()</td><td>获取元素对象组，TagName标签名称div,input,h1,a</td></tr><tr><td>querySelector(“selectors”)</td><td>查找元素、第一个selectors为css选择器</td></tr><tr><td>querySelectorAll(“selectors”)</td><td>查找元素集合selectors为css选择器</td></tr></tbody></table><h3 id="更改使用元素"><a href="#更改使用元素" class="headerlink" title="更改使用元素"></a>更改使用元素</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>document.write()</td><td>向文档写HTML或JavaScript，注意加载完后使用会覆盖原文档</td></tr><tr><td>element.innerHTML</td><td>设置或返回元素的内容</td></tr><tr><td>element.tagName</td><td>返回元素标签名</td></tr><tr><td>element.id/className/title/value</td><td>设置或返回元素的各种属性</td></tr><tr><td>element.style.color/…</td><td>设置或返回元素style的各种属性，原下划线去掉将第二个单词首字母大写</td></tr><tr><td>===元素属性操作===</td><td></td></tr><tr><td>element.getAttribute(“key”)</td><td>返回元素的key属性的值</td></tr><tr><td>element.setAttribute(“key”,”value”)</td><td>设置元素的key属性为value</td></tr><tr><td>element.removeAttribute(“key”)</td><td>删除元素的key属性的值</td></tr></tbody></table><h3 id="元素操作其他元素"><a href="#元素操作其他元素" class="headerlink" title="元素操作其他元素"></a>元素操作其他元素</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>createElement()</td><td>创建元素节点</td></tr><tr><td>element.appendChild()</td><td>向元素添加新的子节点作为最后一个子节点</td></tr><tr><td>element.removeChild()</td><td>从元素中移出子节点</td></tr><tr><td>element.nodeName</td><td>返回节点名称</td></tr><tr><td>===元素选择元素===</td><td></td></tr><tr><td>element.nodeType</td><td>返回节点类型—元素节点1、属性节点2、文本节点3</td></tr><tr><td>element.nodeValue</td><td>返回元素值—元素节点没有value</td></tr><tr><td>element.parentNode</td><td>返回元素的父节点</td></tr><tr><td>element.childNodes</td><td>返回元素子节点的NodeList（包含空格文本节点）</td></tr><tr><td>element.children</td><td>返回元素的子元素节点（只有元素节点）</td></tr><tr><td>element.firstChild</td><td>返回元素的第一个子节点（包含空格文本节点）</td></tr><tr><td>element.firstElementChild</td><td>返回元素的第一个子元素节点（只有元素节点）</td></tr><tr><td>element.lastChild</td><td>返回元素的最后一个子节点（包含空格文本节点）</td></tr><tr><td>element.lastElementChild</td><td>返回元素的最后一个子元素节点（只有元素节点）</td></tr><tr><td>element.previousSibling</td><td>返回元素上一个节点</td></tr><tr><td>element.previousElementSibling</td><td>返回元素上一个元素节点</td></tr><tr><td>element.nextSibling</td><td>返回元素下一个节点</td></tr><tr><td>element.nextElementSibling</td><td>返回元素下一个元素节点</td></tr><tr><td>element.attributes</td><td>返回元素的属性节点名集合NamedNodeMap</td></tr><tr><td>element.insertBefore(new,old)</td><td>在指定的子节点前插入新节点(新节点，某节点前)</td></tr><tr><td>element.replaceChild(new,old)</td><td>替换元素中的子节点(新节点，旧节点)</td></tr></tbody></table><h2 id="JavaScrip事件"><a href="#JavaScrip事件" class="headerlink" title="JavaScrip事件"></a>JavaScrip事件</h2><h3 id="键鼠事件"><a href="#键鼠事件" class="headerlink" title="键鼠事件"></a>键鼠事件</h3><ul><li>鼠标事件：click、dblclick、contextmenu点击右键、mousedown、mousemove、mouseout、mouseover、mouseup</li><li>键盘事件：keydowm、keypress、keyup，keypress不适用系统按键</li></ul><h3 id="其他事件"><a href="#其他事件" class="headerlink" title="其他事件"></a>其他事件</h3><ul><li>load、unload、abort图像加载被中断、blur失去焦点、change、error、fouces、select文本被选择、scroll</li><li>通过选择器选择后，onclick=func，或其他各种事件进行绑定</li></ul><h3 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象event</h3><ul><li>事件发生后会将事件的现场传入到event对象中，可以通过event的属性与子对象获取事件的现场信息</li><li>子对象target/srcElement：获取事件目标，两种写法是因为浏览器是否兼容，都可，相同</li><li>子对象事件目标对象：常用属性，nodeName存储事件目标的标签名称</li></ul><table><thead><tr><th>event属性</th><th>说明</th></tr></thead><tbody><tr><td>clientX</td><td>鼠标指针的水平坐标</td></tr><tr><td>screenX</td><td>鼠标指针的水平坐标</td></tr><tr><td>clientY</td><td>鼠标指针的垂直坐标</td></tr><tr><td>screenY</td><td>鼠标指针的垂直坐标</td></tr><tr><td>ctrlKey</td><td>CTRL键是否被按下</td></tr><tr><td>altKey</td><td>ALT键是否被按下</td></tr><tr><td>shiftKey</td><td>SHIFT键是否被按下</td></tr><tr><td>code</td><td>按键的预定名称</td></tr><tr><td>keyCode</td><td>按键的ASCII值</td></tr><tr><td>key</td><td>按下的具体哪个键</td></tr></tbody></table><h3 id="JavaScrip事件的触发"><a href="#JavaScrip事件的触发" class="headerlink" title="JavaScrip事件的触发"></a>JavaScrip事件的触发</h3><ul><li><p>常规触发方式：element.click() 、 element.dblclick()</p></li><li><p>通用主动触发(非谷歌)：element.fireEvent(“onchange”);</p></li><li><p>谷歌浏览器则是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var evt = document.createEvent(&quot;HTMLEvents&quot;);</span><br><span class="line">evt.initEvent(&quot;click&quot;, false, true);</span><br><span class="line">element.dispatchEvent(evt);</span><br></pre></td></tr></table></figure></li><li><p>事件的传递-冒泡(从内向外)，可以通过目标对象判断是谁</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Web基础-JavaScript语言&quot;&gt;&lt;a href=&quot;#Web基础-JavaScript语言&quot; class=&quot;headerlink&quot; title=&quot;Web基础-JavaScript语言&quot;&gt;&lt;/a&gt;Web基础-JavaScript语言&lt;/h1&gt;&lt;h2 id=&quot;J
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>线性代数笔记</title>
    <link href="http://yoursite.com/2019/12/09/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/09/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-09T12:00:00.000Z</published>
    <updated>2019-12-09T11:59:31.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性代数笔记"><a href="#线性代数笔记" class="headerlink" title="线性代数笔记"></a>线性代数笔记</h1><h2 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h2><h3 id="什么是线性代数"><a href="#什么是线性代数" class="headerlink" title="什么是线性代数"></a>什么是线性代数</h3><ul><li>线性代数就是<strong>高维</strong>的解析几何</li><li>线性代数用到的工具：矩阵、行列式</li><li>本笔记学习主要学习记录矩阵与行列式的定义与使用</li><li>暂不考虑解析几何的计算</li></ul><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><h3 id="行列式-1"><a href="#行列式-1" class="headerlink" title="行列式"></a>行列式</h3><ul><li>等行等列的式子称为<strong>行列式</strong></li><li>二行二列的式子称为 二阶行列式、三行三列的式子称为 三阶行列式、以此类推</li><li>每个行(r)列(c)式都可以计算出一个数(D)</li></ul><h3 id="二元线性方程组与二阶行列式"><a href="#二元线性方程组与二阶行列式" class="headerlink" title="二元线性方程组与二阶行列式"></a>二元线性方程组与二阶行列式</h3><ul><li>计算 a[11]x1 + a[12]x2 = b1</li><li>还有 a[21]x1 + a[22]x2 = b2</li><li>计算消除x2，为 <code>式子① * a[22] - 式子② * a[12]</code> 可以得到，同理可得</li><li>(a[11]a[22] - a[12]a[21]) * x1 = b1 * a[22] - b2 * a[12]</li><li>(a[11]a[22] - a[12]a[21]) * x1 = b2 * a[11] - b2 * a[21]</li><li>如果 <code>a[11]a[22] - a[12]a[21]</code> 不等于零，则可以除过去</li><li>x1 = (b1 * a[22] - b2 * a[12]) / (a[11]a[22] - a[12]a[21])</li><li>x2 = (b2 * a[11] - b2 * a[21]) / (a[11]a[22] - a[12]a[21])</li><li>两个不同的分子，一个相同的分母，可以用三个矩阵表示</li><li>| a[11] a[12] | - - | b1 a[12] | - - | a[12] b1 |</li><li>| a[21] a[22] | - - | b2 a[22] | - - | a[22] b2 |</li><li>三个矩阵分别是 D D1 D2 ， D1 D2 分别是 b1 b2 替换掉 D 的第一列第二列实现的</li><li>则二元线性方程组的两个解为 x1 = D1 / D ; x2 = D2 / D</li><li></li><li>二阶行列式的值 = 主对角线各元素乘积 - 负对角线各元素乘积</li></ul><h3 id="n阶行列式的基本推算"><a href="#n阶行列式的基本推算" class="headerlink" title="n阶行列式的基本推算"></a>n阶行列式的基本推算</h3><ul><li>排列：由正整数 1,2，…，n 按一定次序排成一列，叫做这n各元素的全排列</li><li>逆序对：该元素与之后的各元素对比，如果小于某元素，则两个元素称为一个逆序对</li><li>逆序数：逆序对的个数称为逆序数，表示如下：</li><li>τ(i1,i2…in) = τ(i1)+τ(i2)+…+τ(in)</li><li>例如：τ(3,4,2)=τ(3)+τ(4)+τ(2)=1+1+0=2 –&gt; [32]、[42]</li><li>相邻对换：排列中，两个元素对调，其余元素不变，会改变排列的奇偶性</li><li>特殊行列式：下三角行列式(主对角线上方都是0)、上三角行列式(主对角线下方都是0)、对角行列式(主对角线上下方都是0) 计算方式为主对角线各元素的乘积</li><li>M = (-1)^τ(i1,i2…in) * a[1i]a[2i]…a[ni]</li></ul><h3 id="行列式性质推论"><a href="#行列式性质推论" class="headerlink" title="行列式性质推论"></a>行列式性质推论</h3><ol><li>行列式中，如果每行、每列进行转置，行列式的值不变：D = D^T ； 通过基本公式可以拆分获得</li><li>行列式中的两行(列)进行交换，行列式变号 ； 根据 τ 次序变化获得<ul><li>推论：行列式中，如果有两行(列)相同，则行列式的值 D = 0 ；两行(列)相同的进行互换，行列式变号，D=-D，则D为0</li></ul></li><li>行列式中某一行(列)有公因子k，则k可以提到行列式前面。也就是说，k乘行列式，等于用k乘行列式的某一行 ； 根据基本公式拆分，提取公共项k可得<ul><li>推论：若行列式存在某一行(列)的元素都为零，则行列式的值D = 0 ； 提取此行公因数0,0*D=0</li></ul></li><li>如果行列式有两行(列)成比例，则行列式D = 0 ； 提取比例公因数k，两行相同M=0，答案为：K*M = K*0 = 0</li><li>行列式的拆分定理，如果某行每个可以拆为a+b，可以直接分为两个 此行为a的行列式 + 此行为b的行列式</li><li>行列式某行(列)的倍数加到另一行(列)，值不变 ； 根据定理5，原式+某行倍数(D+Dk)，其中某行倍数根据定理4，Dk=0，所以D+Dk=D</li></ol><h3 id="行列式的特殊式子"><a href="#行列式的特殊式子" class="headerlink" title="行列式的特殊式子"></a>行列式的特殊式子</h3><ul><li>余子式M ：a[ij]的余子式，就是行列式删去i行，j列的所有元素，剩余元素组成的行列式，记做 M[ij]</li><li>代数余子式A ：元素a[ij]的代数余子式就是 A[ij] = (-1)^(i+j) M[ij]</li><li>行列式中，第i行，除了a[ji]以外其他元素都为0，则 D=a[ij]*A[ij]</li><li>D = a[i1]A[i1] + a[i2]A[i2] +…+ a[in]A[in] ； 拆分可得，证明上述计算</li></ul><h3 id="行列式的计算技巧"><a href="#行列式的计算技巧" class="headerlink" title="行列式的计算技巧"></a>行列式的计算技巧</h3><ul><li>根据基础公式进行计算</li><li>根据上下三角进行计算 ： 凑三角</li><li>根据余子式进行计算 ： a[ij]所在行(列)其他元素凑0</li></ul><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="线性方程组与矩阵"><a href="#线性方程组与矩阵" class="headerlink" title="线性方程组与矩阵"></a>线性方程组与矩阵</h3><ul><li>计算 a[11]x1 + a[12]x2 +…+ a[1n]xn = b1</li><li>还有 a[21]x1 + a[22]x2 +…+ a[2n]xn = b2</li><li>等等</li><li>最后 a[m1]x1 + a[m2]x2 +…+ a[mn]xn = bm</li><li>计算这样的式子，去除x和计算符，剩下的矩阵与方程组息息相关，所以我们定义了矩阵</li><li>称为：m*n矩阵，矩阵常用A、B、C来表示，记做 A = (a[ij])m*n</li><li><strong>矩阵定义</strong>：矩阵是由m*n个数，排成m行n列的<strong>表格</strong>；而行列式是n行n列的<strong>数</strong></li><li>复矩阵：由复数构成的矩阵</li><li>实矩阵：由实数构成的矩阵(常使用)</li><li>同型矩阵：两个矩阵的行数相等、列数也相等，则称为同型矩阵</li><li>矩阵相等：如果两个同型矩阵，他们对应的每个元素都相等，则这两个矩阵相等</li><li><strong>矩阵与行列式的区别</strong>：矩阵是表，行列式是数；他们的计算法则不同；表示不同，矩阵是大括弧，行列式是两个直线</li></ul><h3 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h3><ul><li>零矩阵：矩阵中每个元素都为0，常记做0</li><li>行矩阵(行向量α)：行数为1的矩阵</li><li>列矩阵(列向量β)：列数为1的矩阵</li><li>方阵：行数与列数相等的矩阵</li></ul><h4 id="特殊方阵"><a href="#特殊方阵" class="headerlink" title="特殊方阵"></a>特殊方阵</h4><ul><li>上三角阵：主对角线下方都是零元素</li><li>下三角阵：主对角线上方都是零元素</li><li>对角阵：主对角线以外元素都为零</li><li>单位阵：主对角线元素都为1，其余元素都为0，常记做E[n] (n*n的方阵)</li></ul><h3 id="矩阵的基本计算"><a href="#矩阵的基本计算" class="headerlink" title="矩阵的基本计算"></a>矩阵的基本计算</h3><ul><li>同型矩阵的加法：两个矩阵的对应元素相加，记做A+B</li><li>矩阵与常数乘法：kA = ka[ij] k乘以矩阵 等于 每个元素都乘以k</li><li>负矩阵：-A=(-1)A=(-a[ij])</li><li>矩阵与矩阵乘法：A=(a[ij])m*n ,B=(b[ij])n*p ,结果为 C=(a[ij])m*p，记做C=AB<ul><li>要求：前式的列数 等于 后式的行数，才可以使用矩阵乘法</li><li>计算：前者的元素与后者的列元素相乘的和</li><li>结果：结果矩阵的大小是 前式的行数 乘 后式的列数</li></ul></li><li>矩阵乘法的注意特点：<ol><li>注意：不满足乘法交换律：AB≠BC</li><li>注意：两个非零矩阵乘积可能是零矩阵，由AB=0不可以得到A=0或B=0</li><li>注意：不满足消去率，若AB=AC=0且A≠0，不可以得到B=C</li></ol></li><li>A^k = A*A*…*A 记做 A的k次幂，幂公式通用</li><li>转置矩阵：AT，其运算规律：<code>(AT)T=A</code>、<code>(A+B)T=AT+BT</code>、<code>(λA)T=λAT</code>、<code>(AB)T=BTAT</code> (注意顺序AB变BA)</li><li>设A是n阶方针，如果AT=A，则乘A为对称矩阵，简称对称阵；它的元素以主对角线为对称轴对应相等</li><li>设A是n阶方针，如果AT=-A，则乘A为反对称矩阵，简称反对称阵；它的元素关于主对角线异号，并且主对角线上元素全为零</li></ul><h3 id="向量矩阵的计算"><a href="#向量矩阵的计算" class="headerlink" title="向量矩阵的计算"></a>向量矩阵的计算</h3><ul><li>列向量 * 行向量 = <strong>方阵</strong></li><li>行向量 * 列向量 = <strong>数</strong>(上述方阵的<strong>迹</strong>(主对角元素之和))</li></ul><h3 id="矩阵的性质推论"><a href="#矩阵的性质推论" class="headerlink" title="矩阵的性质推论"></a>矩阵的性质推论</h3><h3 id="矩阵的行列式"><a href="#矩阵的行列式" class="headerlink" title="矩阵的行列式"></a>矩阵的行列式</h3><ul><li>由n阶方阵A的元素所构成的行列式(各元素的位置不变)，称为方阵A的行列式，记为detA 或 |A|</li><li>矩阵的行列式的性质：<ol><li><code>|AT| = |A|</code></li><li><code>|kA| = K^n|A|</code></li><li><code>|AB| = |A|*|B|</code></li></ol></li></ul><h2 id="线性代数进一步学习"><a href="#线性代数进一步学习" class="headerlink" title="线性代数进一步学习"></a>线性代数进一步学习</h2><h3 id="伴随矩阵"><a href="#伴随矩阵" class="headerlink" title="伴随矩阵"></a>伴随矩阵</h3><h3 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h3><h3 id="分块矩阵"><a href="#分块矩阵" class="headerlink" title="分块矩阵"></a>分块矩阵</h3><h3 id="初等变换与初等矩阵"><a href="#初等变换与初等矩阵" class="headerlink" title="初等变换与初等矩阵"></a>初等变换与初等矩阵</h3><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性代数笔记&quot;&gt;&lt;a href=&quot;#线性代数笔记&quot; class=&quot;headerlink&quot; title=&quot;线性代数笔记&quot;&gt;&lt;/a&gt;线性代数笔记&lt;/h1&gt;&lt;h2 id=&quot;线性代数&quot;&gt;&lt;a href=&quot;#线性代数&quot; class=&quot;headerlink&quot; title=&quot;线
      
    
    </summary>
    
    
      <category term="结构算法" scheme="http://yoursite.com/categories/%E7%BB%93%E6%9E%84%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Java实践-WebServer(仿Tomcat)</title>
    <link href="http://yoursite.com/2019/12/09/Java%E5%AE%9E%E8%B7%B5-WebServer(%E4%BB%BFTomcat)/"/>
    <id>http://yoursite.com/2019/12/09/Java%E5%AE%9E%E8%B7%B5-WebServer(%E4%BB%BFTomcat)/</id>
    <published>2019-12-09T11:59:17.000Z</published>
    <updated>2019-12-09T11:58:51.887Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java实践-WebServer-仿Tomcat"><a href="#Java实践-WebServer-仿Tomcat" class="headerlink" title="Java实践-WebServer(仿Tomcat)"></a>Java实践-WebServer(仿Tomcat)</h1><h2 id="项目解析"><a href="#项目解析" class="headerlink" title="项目解析"></a>项目解析</h2><h3 id="什么是WebServer"><a href="#什么是WebServer" class="headerlink" title="什么是WebServer"></a>什么是WebServer</h3><ul><li>WebServer也称Web容器，用于存放WebApp，一个WebServer可以存放多个WebApp</li><li>Server服务器，WebServer就是Web服务器，就是支持HTTP应用协议的服务器</li><li>其工作流程一般三部分：解析请求、处理请求、发送响应</li><li>注意浏览器(客户端)在连接到服务端后会立即发送一个请求到服务端确认</li><li>WebApp储存：网页，其他素材，程序代码等</li></ul><h3 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h3><ul><li>做到类似 Tomcat 可以响应浏览器的各种请求，并做到应答处理</li><li>在业务方面，完成注册和登录的实现（用户名、密码、昵称、年龄）</li></ul><h3 id="需求分析-方向"><a href="#需求分析-方向" class="headerlink" title="需求分析(方向)"></a>需求分析(方向)</h3><ul><li>通过HTTP协议建立浏览器客户端与服务器之间的连接，完成WebServer任务</li><li>主要事务有两种，一个是资源请求，一个是业务处理</li><li>资源请求的两种情况：资源存在–&gt;发送资源；资源不存在–&gt;响应404页面</li><li>业务处理有多种，这里暂时实现注册和登录两个业务</li></ul><h3 id="需求分析-细节"><a href="#需求分析-细节" class="headerlink" title="需求分析(细节)"></a>需求分析(细节)</h3><ul><li>熟悉HTTP协议，在C/S沟通过程中，正确解析消息信息，正确响应响应信息</li><li>熟悉XML的使用，尤其是 MimeMapping 必须XML导入</li><li>使用线程池、超类、封装等，优化项目性能，增强其可扩展性</li><li>在构建此项目时，最重要的是学习该编程思想</li></ul><h2 id="项目搭建-准备"><a href="#项目搭建-准备" class="headerlink" title="项目搭建 - 准备"></a>项目搭建 - 准备</h2><h3 id="项目准备工作"><a href="#项目准备工作" class="headerlink" title="项目准备工作"></a>项目准备工作</h3><ul><li>创建 Maven Project ，设置好项目参数</li><li>导入后期会用到的 dom4j Jar包</li><li>创建三个包：<code>core</code> 核心代码包、<code>http</code> HTTP相关代码包、<code>servlet</code> 存放各servlet的包</li><li>项目根目录创建两个文件夹：<code>conf</code> 存放各配置文件、<code>webapps</code> 存放Web资源</li><li>向 <code>conf</code> 文件夹中导入所需的 MimeMapping XML配置文件</li><li>在 <code>webapps</code> 文件夹下创建 <code>myweb</code>和<code>root</code> 文件夹，前者创建各网页资源，后者创建一个公用的404页面</li><li>目录<code>myweb</code>文件：index主页、注册/注册成功/注册失败页面、登录/登录成功/登录失败页面</li></ul><h3 id="核心代码：实现连接"><a href="#核心代码：实现连接" class="headerlink" title="核心代码：实现连接"></a>核心代码：实现连接</h3><ul><li>创建 <code>WebServer</code> 类作为主类，定义线程池，申请8088端口，并且循环等待连接获取Socket，传入 ‘ClientHandler’ 类生成线程任务，放入线程池</li><li>创建 ‘ClientHandler’ 类作为处理事务类，通过主类传过来的Socket进行工作，注意Socket的关闭(写在finally中)</li></ul><h3 id="创建HTTP相关类"><a href="#创建HTTP相关类" class="headerlink" title="创建HTTP相关类"></a>创建HTTP相关类</h3><ul><li><code>HttpContext</code>工具类、<code>EmptyRequestException</code>空请求类、<code>HttpRequst</code>请求类、<code>HttpResponse</code>响应类</li><li>创建 <code>HttpContext</code> 类，主要用作工具类，存储查询MimeMapping，静态块中初始化MimeMapping，并提供公用方法 根据后缀 查询 Mime-Type</li><li>web.xml 文件结构说明：每个二级标签<code>&lt;mime-mapping&gt;</code>下存有：<code>&lt;extension&gt;</code>中的文本作为文件后缀，<code>&lt;mime-type&gt;</code>中的文本作为MimeType</li><li>创建 <code>EmptyRequestException</code> 类，自定义的空请求类，因为浏览器会时不时发送空请求</li><li>创建 <code>HttpRequst</code> 类，完成请求的解析，并储存到成员变量中</li><li>注意空请求情况的处理，以及业务参数的解析</li><li>创建 <code>HttpResponse</code> 类，构造方法初始化参数，编写get/set方法，提供一个 flush() 方法暂不编写</li></ul><h3 id="创建Server-Context类"><a href="#创建Server-Context类" class="headerlink" title="创建Server Context类"></a>创建Server Context类</h3><ul><li>创建’ServerContext’类，主要用作工具类，存储查询ServletMapping，静态块中初始化ServletMapping，并提供公用方法 根据请求方式 查询对应Servlet</li><li>注意前提先创建 <code>HttpServlet</code>类 <code>RegServlet</code>类 <code>LoginServlet</code>类，内容可以为空，为了配合ServletMapping中的value类型</li><li>注意前提先创建一个servlet.xml文件，存放uri对应业务的servlet类全名，储存好这次需求两个业务的值</li></ul><h2 id="项目搭建-事务"><a href="#项目搭建-事务" class="headerlink" title="项目搭建 - 事务"></a>项目搭建 - 事务</h2><h3 id="响应请求资源"><a href="#响应请求资源" class="headerlink" title="响应请求资源"></a>响应请求资源</h3><ul><li><code>ClientHandler</code> 类中的 run() 方法开始编写事务，初始化请求类、响应类，根据获取的servlet判定(是否为null)是什么事务</li><li>先处理资源事务：判断是否存在资源，决定返回什么资源，最后进行 flush() 响应资源</li><li>进一步编写 <code>Response</code> 类中的 setEntity() 方法 和 flush() 方法</li></ul><h3 id="响应请求业务"><a href="#响应请求业务" class="headerlink" title="响应请求业务"></a>响应请求业务</h3><ul><li>创建对应业务处理，完善 <code>HttpServlet</code> 抽象超类</li><li>完善 <code>RegServlet</code> 注册类</li><li>完善 <code>LoginServlet</code> 登录类</li><li>优化代码</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java实践-WebServer-仿Tomcat&quot;&gt;&lt;a href=&quot;#Java实践-WebServer-仿Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Java实践-WebServer(仿Tomcat)&quot;&gt;&lt;/a&gt;Java实践-WebSer
      
    
    </summary>
    
    
      <category term="语言编程" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Java实践-聊天室(C/S网络编程)</title>
    <link href="http://yoursite.com/2019/12/09/Java%E5%AE%9E%E8%B7%B5-%E8%81%8A%E5%A4%A9%E5%AE%A4(C-S%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B)/"/>
    <id>http://yoursite.com/2019/12/09/Java%E5%AE%9E%E8%B7%B5-%E8%81%8A%E5%A4%A9%E5%AE%A4(C-S%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B)/</id>
    <published>2019-12-09T11:58:17.000Z</published>
    <updated>2019-12-09T11:58:09.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java实践-聊天室-C-S网络编程"><a href="#Java实践-聊天室-C-S网络编程" class="headerlink" title="Java实践-聊天室(C/S网络编程)"></a>Java实践-聊天室(C/S网络编程)</h1><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java实践-聊天室-C-S网络编程&quot;&gt;&lt;a href=&quot;#Java实践-聊天室-C-S网络编程&quot; class=&quot;headerlink&quot; title=&quot;Java实践-聊天室(C/S网络编程)&quot;&gt;&lt;/a&gt;Java实践-聊天室(C/S网络编程)&lt;/h1&gt;&lt;h2 id=
      
    
    </summary>
    
    
      <category term="项目练习" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java练习-随机读写/顺序读写</title>
    <link href="http://yoursite.com/2019/12/09/Java%E7%BB%83%E4%B9%A0-%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99-%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99/"/>
    <id>http://yoursite.com/2019/12/09/Java%E7%BB%83%E4%B9%A0-%E9%9A%8F%E6%9C%BA%E8%AF%BB%E5%86%99-%E9%A1%BA%E5%BA%8F%E8%AF%BB%E5%86%99/</id>
    <published>2019-12-09T11:57:17.000Z</published>
    <updated>2019-12-09T11:56:53.033Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java练习-随机读写-顺序读写"><a href="#Java练习-随机读写-顺序读写" class="headerlink" title="Java练习-随机读写/顺序读写"></a>Java练习-随机读写/顺序读写</h1><h2 id="随机读写复制文件"><a href="#随机读写复制文件" class="headerlink" title="随机读写复制文件"></a>随机读写复制文件</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>随机读写使用 java.io.RandomAccessFile 类实现</li><li>随机打开两个文件，一个读取，一个写入</li><li>由于读写是字节读写，效率不高，所以通过定义数组来提高读写性能</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">RandomAccessFile src = new RandomAccessFile(&quot;./demo.zip&quot;,&quot;r&quot;);  //通过随机读写打开源文件，定义权限只读即可</span><br><span class="line">RandomAccessFile desc = new RandomAccessFile(&quot;./demo_cp.zip&quot;,&quot;rw&quot;);  //通过随机读写打开目标文件，定义权限读写</span><br><span class="line"></span><br><span class="line">byte[] buf = new byte[1024*10];  //为了提高速率使用字节数组</span><br><span class="line">int len = -1;  //定义每次实际读取到的字节</span><br><span class="line"></span><br><span class="line">while((len = src.read(buf))!=-1) &#123;</span><br><span class="line">desc.write(buf,0,len);  //只要读取到数据，就往目标文件中写入读取到长度的数据</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;复制完毕!&quot;);</span><br><span class="line">src.close();  //记得关闭文件</span><br><span class="line">desc.close();  //记得关闭文件</span><br></pre></td></tr></table></figure><h2 id="顺序读写复制文件"><a href="#顺序读写复制文件" class="headerlink" title="顺序读写复制文件"></a>顺序读写复制文件</h2><h3 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>顺序读写是通过 IO 流实现的，java.io.InputStream , java.io.OutputStream</li><li>通过IO连接到两个文件，一个使用输入流，一个使用输出流</li><li>由于读写是字节读写，效率不高，所以通过缓冲流的高级流来提高效率</li></ul><h3 id="代码分析-1"><a href="#代码分析-1" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">FileInputStream fis = new FileInputStream(&quot;demo.zip&quot;);  //定义输入流，连接到源文件</span><br><span class="line">BufferedInputStream bis = new BufferedInputStream(fis);  //定义缓冲流，连接到输入流上，提高效率</span><br><span class="line"></span><br><span class="line">FileOutputStream fos = new FileOutputStream(&quot;demo_cp.zip&quot;);  //定义输出流，连接到目标文件</span><br><span class="line">BufferedOutputStream bos = new BufferedOutputStream(fos);  //定义缓冲流，连接到输出流上，提高效率</span><br><span class="line"></span><br><span class="line">int d = -1;  //定义每次实际读取到的字节</span><br><span class="line"></span><br><span class="line">while((d=bis.read())!=-1) &#123;</span><br><span class="line">bos.write(d);  //将读到的字节存储到缓冲流中</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;复制完毕!&quot;);</span><br><span class="line">bis.close();  //只需要关闭最高层高级流即可，连接到后面的流会逐级关闭</span><br><span class="line">bos.close();  //执行缓冲流的flush()方法 或 缓冲区满了 或 缓冲流关闭时，缓冲流会向文件按缓冲大小写数据</span><br></pre></td></tr></table></figure><h2 id="随机读写存取用户信息"><a href="#随机读写存取用户信息" class="headerlink" title="随机读写存取用户信息"></a>随机读写存取用户信息</h2><h3 id="练习需求"><a href="#练习需求" class="headerlink" title="练习需求"></a>练习需求</h3><ul><li>实现1：完成用户注册功能，程序启动后顺序输入：用户名，密码，昵称，年龄，然后将其写入文件user.dat中保存</li><li>实现2：修改昵称功能，程序启动后要求用户输入用户名和新昵称，然后将user.dat文件中对应的记录进行修改，如果输入的用户名在user.dat文件中不存在，则输出：查无此人</li></ul><h3 id="实现思路-2"><a href="#实现思路-2" class="headerlink" title="实现思路"></a>实现思路</h3><ul><li>分析：设置用户名、密码、昵称为String类型，年龄为int类型</li><li>定义格式：每条记录占用100字节，其中用户名，密码，昵称各占32字节，年龄占4字节</li><li>操作：通过随机读写的指针对文件进行增改查操作</li></ul><h3 id="代码分析-2"><a href="#代码分析-2" class="headerlink" title="代码分析"></a>代码分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//通过控制台输入，获取注册信息</span><br><span class="line">System.out.println(&quot;欢迎注册&quot;);</span><br><span class="line">Scanner scan = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入用户名&quot;);</span><br><span class="line">String user = scan.next();</span><br><span class="line">System.out.println(&quot;请输入密码&quot;);</span><br><span class="line">String pwd = scan.next();</span><br><span class="line">System.out.println(&quot;请输入昵称&quot;);</span><br><span class="line">String nick = scan.next();</span><br><span class="line">System.out.println(&quot;请输入年龄&quot;);</span><br><span class="line">int age = scan.nextInt();</span><br><span class="line">scan.close();</span><br><span class="line">//随机打开用户文件，并将文件指针指向最后</span><br><span class="line">RandomAccessFile raf = new RandomAccessFile(&quot;user.dat&quot;,&quot;rw&quot;);</span><br><span class="line">raf.seek(raf.length());</span><br><span class="line">//定义字节数组存放数据</span><br><span class="line">byte[] data;</span><br><span class="line">//储存用户信息</span><br><span class="line">data= user.getBytes(&quot;utf-8&quot;);  //将用户信息根据utf-8拆为字节数组</span><br><span class="line">data = Arrays.copyOf(data, 32);  //将该数组扩容到32字节</span><br><span class="line">raf.write(data);  //写入该数组</span><br><span class="line">//同上</span><br><span class="line">data = pwd.getBytes(&quot;utf-8&quot;);</span><br><span class="line">data = Arrays.copyOf(data, 32);</span><br><span class="line">raf.write(data);</span><br><span class="line">//同上</span><br><span class="line">data = nick.getBytes(&quot;utf-8&quot;);</span><br><span class="line">data = Arrays.copyOf(data, 32);</span><br><span class="line">raf.write(data);</span><br><span class="line">//直接通过 writeInt() 方法将int值存入到文件中</span><br><span class="line">raf.writeInt(age);</span><br><span class="line">raf.close();  //关闭文件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//通过控制台输入，获取修改信息</span><br><span class="line">System.out.println(&quot;**修改昵称**&quot;);</span><br><span class="line">Scanner scan = new Scanner(System.in);</span><br><span class="line">System.out.println(&quot;请输入用户名：&quot;);</span><br><span class="line">String name = scan.nextLine();</span><br><span class="line">System.out.println(&quot;请输入新昵称：&quot;);</span><br><span class="line">String nick = scan.nextLine();</span><br><span class="line">scan.close();</span><br><span class="line">//随机打开用户文件</span><br><span class="line">RandomAccessFile raf = new RandomAccessFile(&quot;user.dat&quot;,&quot;rw&quot;);</span><br><span class="line">for(int i=0;i&lt;raf.length()/100;i++) &#123;  //通过遍历查找用户，循环条件为条数</span><br><span class="line">raf.seek(i*100);  //确定指针位置</span><br><span class="line">    //定义并读取32字节数据，返回字符串并清除空白</span><br><span class="line">byte[] data = new byte[32];  </span><br><span class="line">raf.read(data);</span><br><span class="line">String user = new String(data).trim();</span><br><span class="line">//判断是否为本条信息中的用户</span><br><span class="line">if(user.equals(name)) &#123;</span><br><span class="line">raf.seek(raf.getFilePointer()+32);  //指针指向本条信息昵称位置</span><br><span class="line">        //同上的写入操作</span><br><span class="line">data = nick.getBytes();</span><br><span class="line">data = Arrays.copyOf(data, 32);</span><br><span class="line">raf.write(data);</span><br><span class="line">System.out.println(&quot;修改完成&quot;);</span><br><span class="line">break;  //完成任务，退出循环</span><br><span class="line">&#125;</span><br><span class="line">    //如果指针到了最后一条还是找到用户</span><br><span class="line">if(raf.getFilePointer()==raf.length()-100+32) &#123;</span><br><span class="line">System.out.println(&quot;查无此人&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">raf.close();  //关闭文件</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java练习-随机读写-顺序读写&quot;&gt;&lt;a href=&quot;#Java练习-随机读写-顺序读写&quot; class=&quot;headerlink&quot; title=&quot;Java练习-随机读写/顺序读写&quot;&gt;&lt;/a&gt;Java练习-随机读写/顺序读写&lt;/h1&gt;&lt;h2 id=&quot;随机读写复制文件&quot;
      
    
    </summary>
    
    
      <category term="项目练习" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java实践-飞机大战</title>
    <link href="http://yoursite.com/2019/12/09/Java%E5%AE%9E%E8%B7%B5-%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/"/>
    <id>http://yoursite.com/2019/12/09/Java%E5%AE%9E%E8%B7%B5-%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</id>
    <published>2019-12-09T11:56:46.000Z</published>
    <updated>2019-12-09T11:56:04.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java实践-飞机大战"><a href="#Java实践-飞机大战" class="headerlink" title="Java实践-飞机大战"></a>Java实践-飞机大战</h1><h2 id="待更新"><a href="#待更新" class="headerlink" title="待更新"></a>待更新</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java实践-飞机大战&quot;&gt;&lt;a href=&quot;#Java实践-飞机大战&quot; class=&quot;headerlink&quot; title=&quot;Java实践-飞机大战&quot;&gt;&lt;/a&gt;Java实践-飞机大战&lt;/h1&gt;&lt;h2 id=&quot;待更新&quot;&gt;&lt;a href=&quot;#待更新&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="项目练习" scheme="http://yoursite.com/categories/%E9%A1%B9%E7%9B%AE%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
</feed>
